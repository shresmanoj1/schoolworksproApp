import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_html/flutter_html.dart';import 'package:flutter_html/html_parser.dart';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:html_editor_enhanced/html_editor.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/my_learning/activity/activity_view_model.dart';import 'package:schoolworkspro_app/Screens/my_learning/activity/student_assessment_submission_screen.dart';import 'package:url_launcher/url_launcher.dart';import 'package:html/dom.dart' as dom;import 'package:intl/intl.dart';import '../../../config/api_response_config.dart';import '../../../constants.dart';import '../../../constants/colors.dart';import '../../lecturer/lecturer_common_view_model.dart';import '../../widgets/custom_button.dart';import '../components/assessment_submission_card.dart';class StudentAssessmentTaskScreen extends StatefulWidget {  final bool isFromInside;  final String lessonSlug;  final String lessonTitle;  const StudentAssessmentTaskScreen(      {Key? key,      required this.lessonSlug,      required this.lessonTitle,      required this.isFromInside})      : super(key: key);  @override  State<StudentAssessmentTaskScreen> createState() =>      _StudentAssessmentTaskScreenState();}class _StudentAssessmentTaskScreenState    extends State<StudentAssessmentTaskScreen> {  late LecturerCommonViewModel _provider2;  late ActivityViewModel _provider;  final HtmlEditorController controller = HtmlEditorController();  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider2 = Provider.of<LecturerCommonViewModel>(context, listen: false);      _provider = Provider.of<ActivityViewModel>(context, listen: false);      _provider.fetchCheckSubmission(widget.lessonSlug);      _provider2.fetchinsideactivity(widget.lessonSlug.toString());    });    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: widget.isFromInside == false            ? AppBar(                title: Text(                  widget.lessonTitle,                  style: TextStyle(color: white),                ),                elevation: 0.0,                centerTitle: false,                // iconTheme: const IconThemeData(                //   color: Colors.black,                // ),                // backgroundColor: Colors.white        )            : null,        body: SafeArea(          child: Consumer2<LecturerCommonViewModel, ActivityViewModel>(              builder: (context, value, snapShot, child) {            return isLoading(value.insidelessonactivityApiResponse) ||                    isLoading(snapShot.checkSubmissionApiResponse)                ? const Center(child: CupertinoActivityIndicator())                : value.insideActivity.isEmpty                    ? Center(                        child: Text("No Task available"),                      )                    : Padding(                        padding: const EdgeInsets.symmetric(horizontal: 10),                        child: ListView.builder(                          shrinkWrap: true,                          physics: const ScrollPhysics(),                          itemCount: value.insideActivity.length,                          itemBuilder: (context, i) {                            // print("submission:::::::");                            return Column(                              children: [                                const SizedBox(                                  height: 8,                                ),                                SizedBox(                                  width: double.infinity,                                  child: Html(                                    style: {                                      "ol":                                          Style(margin: const EdgeInsets.all(5))                                    },                                    shrinkWrap: true,                                    data: value.insideActivity[i]['contents'],                                    customRender: {                                      "table": (context, child) {                                        return SingleChildScrollView(                                          scrollDirection: Axis.horizontal,                                          child: (context.tree as TableLayoutElement).toWidget(context),                                        );                                      }                                    },                                    onLinkTap: (String? url,                                        RenderContext context,                                        Map<String, String> attributes,                                        dom.Element? element) {                                      Future<void> _launchInBrowser(                                          Uri url) async {                                        if (await launchUrl(                                          url,                                          mode: LaunchMode.externalApplication,                                        )) {                                          throw 'Could not launch $url';                                        }                                      }                                      var linkUrl = url!.replaceAll(" ", "%20");                                      _launchInBrowser(Uri.parse(linkUrl));                                    },                                    onImageTap: (String? url,                                        RenderContext context,                                        Map<String, String> attributes,                                        dom.Element? element) {                                      launch(url!);                                    },                                  ),                                ),                                const SizedBox(                                  height: 10,                                ),                                Padding(                                  padding: const EdgeInsets.all(8.0),                                  child: Column(                                    children: [                                      AssessmentSubmissionCard(                                          color: grey_200,                                          valueColor: snapShot.checkSubmission                                                          .submission ==                                                      null ||                                                  snapShot.checkSubmission                                                      .submission!.isEmpty                                              ? Colors.red.shade200                                              : greenLight,                                          label: "Submission status",                                          value: snapShot.checkSubmission                                                          .submission ==                                                      null ||                                                  snapShot.checkSubmission                                                      .submission!.isEmpty                                              ? "Not Submitted"                                              : "Submitted"),                                      AssessmentSubmissionCard(                                          color: white,                                          label: "Grading status",                                          value: snapShot.checkSubmission                                                          .submission ==                                                      null ||                                                  snapShot.checkSubmission                                                      .submission!.isEmpty                                              ? "Not Submitted"                                              : "Submitted for grading"),                                      Builder(builder: (context) {                                        DateTime now = DateTime.parse(                                            DateTime.parse(                                                    value.insideActivity[i]                                                        ['dueDate'])                                                .toString());                                        now = now.add(const Duration(                                            hours: 5, minutes: 45));                                        var formattedTime = DateFormat(                                                'y, MMMM d, EEEE, hh:mm a')                                            .format(now);                                        return AssessmentSubmissionCard(                                            color: grey_200,                                            value: formattedTime,                                            label: "Due Date");                                      }),                                      Builder(builder: (context) {                                        return AssessmentSubmissionCard(                                            color: white,                                            value: snapShot.checkSubmission                                                            .submission ==                                                        null ||                                                    snapShot.checkSubmission                                                        .submission!.isEmpty                                                ? "n/a"                                                : DateFormat(                                                        'y, MMMM d, EEEE, hh:mm a')                                                    .format(DateTime.parse(snapShot                                                                .checkSubmission                                                                .submission[                                                            'updatedAt'])                                                        .add(const Duration(                                                            hours: 5,                                                            minutes: 45)))                                                    .toString(),                                            label: "Submitted Date");                                      }),                                      AssessmentSubmissionCard(                                          count: snapShot.checkSubmission                                                      .submission["feedback"] ==                                                  null                                              ? 0                                              : 1,                                          onTap: () {                                            showDialog(                                              context: context,                                              builder: (ctx) => AlertDialog(                                                title: const Text(                                                    "Submission Feedback"),                                                content: Container(                                                  height: MediaQuery.of(context)                                                          .size                                                          .height /                                                      2,                                                  child: Column(                                                    crossAxisAlignment:                                                        CrossAxisAlignment                                                            .start,                                                    children: [                                                      Text(widget.lessonTitle),                                                      const SizedBox(                                                        height: 10,                                                      ),                                                      const Divider(                                                          color: Colors                                                              .blueAccent),                                                      const Text("Feedback"),                                                      const SizedBox(                                                        height: 10,                                                      ),                                                      Container(                                                          width:                                                              double.infinity,                                                          padding:                                                              const EdgeInsets                                                                  .all(8.0),                                                          decoration:                                                              BoxDecoration(                                                            borderRadius:                                                                BorderRadius                                                                    .circular(                                                                        4.0),                                                            color: snapShot.checkSubmission.submission[                                                                            "feedback"] ==                                                                        null ||                                                                    snapShot.checkSubmission.submission[                                                                            "feedback"] ==                                                                        ""                                                                ? Colors.blue                                                                    .shade100                                                                : const Color(                                                                    0xffc8e6c9),                                                          ),                                                          child: Text(                                                            snapShot.checkSubmission.submission[                                                                            "feedback"] ==                                                                        null ||                                                                    snapShot.checkSubmission.submission[                                                                            "feedback"] ==                                                                        ""                                                                ? "Your assessment has not been reviewed yet!"                                                                : snapShot                                                                    .checkSubmission                                                                    .submission[                                                                        "feedback"]                                                                    .toString(),                                                            style:                                                                const TextStyle(                                                                    color: Colors                                                                        .black),                                                          )),                                                      Align(                                                        alignment: Alignment                                                            .bottomCenter,                                                        child: Padding(                                                          padding:                                                              const EdgeInsets                                                                      .only(                                                                  top: 15.0),                                                          child: SizedBox(                                                            height: 35,                                                            width: 80,                                                            child:                                                                ElevatedButton(                                                              onPressed: () {                                                                Navigator.pop(                                                                    context);                                                              },                                                              child: const Text(                                                                "Close",                                                                style: TextStyle(                                                                    fontSize:                                                                        14,                                                                    color: Colors                                                                        .white),                                                              ),                                                            ),                                                          ),                                                        ),                                                      )                                                    ],                                                  ),                                                ),                                              ),                                            );                                          },                                          color: grey_200,                                          label: "Submission Comment",                                          value: snapShot.checkSubmission                                                          .submission ==                                                      null ||                                                  snapShot.checkSubmission                                                      .submission!.isEmpty                                              ? "n/a"                                              : "widget"),                                    ],                                  ),                                ),                                snapShot.checkSubmission.submission == null ||                                        snapShot                                            .checkSubmission.submission!.isEmpty                                    ? Row(                                        mainAxisAlignment:                                            MainAxisAlignment.start,                                        children: [                                          Align(                                            alignment: Alignment.center,                                            child: CustomButton(                                              buttonColor: DateTime.parse(value                                                                  .insideActivity[                                                              i]['dueDate'])                                                          .compareTo(                                                              DateTime.now()) <                                                      0                                                  ? grey_400                                                  : const Color(0xFF0027AF),                                              borderRadius: 10,                                              buttonName: "Add Submission",                                              onClick: DateTime.parse(value                                                                  .insideActivity[                                                              i]['dueDate'])                                                          .compareTo(                                                              DateTime.now()) <                                                      0                                                  ? () {}                                                  : () {                                                      Map<String, dynamic>                                                          taskValue = {                                                        "lessonSlug":                                                            widget.lessonSlug,                                                        "assessmentId": value                                                                .insideActivity[                                                            i]['_id'],                                                        "isUpdate": false,                                                      };                                                      Navigator.push(                                                          context,                                                          MaterialPageRoute(                                                              builder: (context) =>                                                                  StudentAssessmentSubmissionScreen(                                                                    taskValue:                                                                        taskValue,                                                                  ))).then(                                                          (value) {                                                        snapShot                                                            .fetchCheckSubmission(                                                                widget                                                                    .lessonSlug);                                                      });                                                    },                                            ),                                          ),                                        ],                                      )                                    : Column(                                        crossAxisAlignment:                                            CrossAxisAlignment.start,                                        children: [                                          const SizedBox(                                            height: 10,                                          ),                                          Row(                                            mainAxisAlignment:                                                MainAxisAlignment.center,                                            children: [                                              ElevatedButton(                                                  onPressed: DateTime.parse(value.insideActivity[i]['dueDate']).compareTo(                                                              DateTime.now()) <                                                          0                                                      ? () {}                                                      : () {                                                          Map<String, dynamic>                                                              taskValue = {                                                            "lessonSlug": widget                                                                .lessonSlug,                                                            "assessmentId":                                                                value.insideActivity[                                                                    i]['_id'],                                                            "isUpdate": true,                                                            "content": snapShot                                                                    .checkSubmission                                                                    .submission![                                                                "contents"],                                                          };                                                          Navigator.push(                                                              context,                                                              MaterialPageRoute(                                                                  builder: (context) =>                                                                      StudentAssessmentSubmissionScreen(                                                                        taskValue:                                                                            taskValue,                                                                      ))).then(                                                              (value) {                                                            snapShot.fetchCheckSubmission(                                                                widget                                                                    .lessonSlug);                                                          });                                                        },                                                  style: DateTime.parse(value.insideActivity[i]['dueDate'])                                                              .compareTo(DateTime                                                                  .now()) <                                                          0                                                      ? ButtonStyle(                                                          backgroundColor:                                                              MaterialStateProperty.all(                                                                  Colors.grey),                                                          shape: MaterialStateProperty.all<                                                                  RoundedRectangleBorder>(                                                              RoundedRectangleBorder(                                                            borderRadius:                                                                BorderRadius                                                                    .circular(                                                                        4.0),                                                          )))                                                      : null,                                                  child:                                                      const Text('Update Task')),                                            ],                                          ),                                        ],                                      ),                                const SizedBox(                                  height: 100,                                ),                              ],                            );                          },                        ),                      );          }),        ));  }}