import 'package:flutter/material.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/my_learning/additional_resources/additional_resources_view_model.dart';import 'package:schoolworkspro_app/components/shimmer.dart';import 'package:url_launcher/url_launcher.dart';import '../../../config/api_response_config.dart';class ReferenceLinksScreen extends StatefulWidget {  final lessonSlug;  const ReferenceLinksScreen({Key? key, required this.lessonSlug})      : super(key: key);  @override  State<ReferenceLinksScreen> createState() =>      _ReferenceLinksScreenState();}class _ReferenceLinksScreenState extends State<ReferenceLinksScreen> {  late AdditionalResourcesViewModel additionalResourcesViewModel;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      additionalResourcesViewModel =          Provider.of<AdditionalResourcesViewModel>(context,              listen: false);      additionalResourcesViewModel          .fetchRefreshLinks(widget.lessonSlug);    });    super.initState();  }  Future<void> refreshData() async {    additionalResourcesViewModel        .fetchRefreshLinks(widget.lessonSlug);  }  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: AppBar(          elevation: 0.0,          iconTheme: const IconThemeData(color: Colors.black),          backgroundColor: Colors.white,          title: const Text(            "Reference Links",            style: TextStyle(color: Colors.black),          ),        ),        body: Consumer<AdditionalResourcesViewModel>(            builder: (context, getRefreshLinks, child) {              return isLoading(                  getRefreshLinks.refreshLinksResponse)                  ? VerticalLoader()                  : RefreshIndicator(onRefresh: ()=> refreshData(), child: Padding(                padding: const EdgeInsets.symmetric(                    horizontal: 10, vertical: 10),                child: ListView.builder(                  itemCount: getRefreshLinks.links.length,                  itemBuilder: (BuildContext context, int index) {                    return Card(                        elevation: 1.0,                        clipBehavior: Clip.antiAlias,                        child: Padding(                            padding: const EdgeInsets.symmetric(                                horizontal: 10, vertical: 15),                            child:  Row(                              crossAxisAlignment: CrossAxisAlignment.start,                              children: [                                Text("${index+1}."),                                SizedBox(width: 5,),                                Expanded(                                  child: InkWell(onTap: (){                                    launch(                                        getRefreshLinks                                            .links[index].link.toString());                                  }, child: Text(                                    getRefreshLinks                                        .links[index].title                                        .toString(),                                  )),                                ),                              ],                            ),));                  },                ),              ));              ;            }));  }}