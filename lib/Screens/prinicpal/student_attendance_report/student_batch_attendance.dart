import 'dart:developer';import 'package:dropdown_search/dropdown_search.dart';import 'package:flutter/material.dart';import 'package:percent_indicator/percent_indicator.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/prinicpal/principal_common_view_model.dart';import 'package:schoolworkspro_app/config/api_response_config.dart';import 'package:schoolworkspro_app/constants.dart';import '../../../components/shimmer.dart';import '../../request/DateRequest.dart';class StudentBatchAttendanceScreen extends StatefulWidget {  const StudentBatchAttendanceScreen({Key? key}) : super(key: key);  @override  StudentBatchAttendanceStateScreen createState() =>      StudentBatchAttendanceStateScreen();}class StudentBatchAttendanceStateScreen    extends State<StudentBatchAttendanceScreen> {  String? mySelection;  String? selected_batch;  bool show = false;  late PrinicpalCommonViewModel _provider;  Widget cusSearchBar = const Text(    'Student Attendance',    style: TextStyle(color: Colors.black),  );  @override  Widget build(BuildContext context) {    return Consumer<PrinicpalCommonViewModel>(builder: (context, value, child) {      return Scaffold(          body: ListView(        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),        children: [          Container(            color: Colors.orange.shade200,            child: Padding(              padding: const EdgeInsets.all(8.0),              child: RichText(                textAlign: TextAlign.center,                text: const TextSpan(                  children: [                    WidgetSpan(                      child: Icon(Icons.warning, color: Colors.red, size: 14),                    ),                    TextSpan(                        text:                            "Note: You must select a section/batch to view the attendance report....",                        style: TextStyle(                          color: Colors.black,                        )),                  ],                ),              ),            ),          ),          const Padding(            padding: EdgeInsets.all(8.0),            child: Text(              'Select Course/Class',              style: TextStyle(fontWeight: FontWeight.bold),            ),          ),          DropdownButtonFormField(            isExpanded: true,            decoration: const InputDecoration(              border: InputBorder.none,              filled: true,              hintText: 'Select a course',            ),            icon: const Icon(Icons.arrow_drop_down_outlined),            items: value.courses.map((pt) {              return DropdownMenuItem(                value: pt.courseSlug,                child: Text(                  pt.courseName.toString(),                  overflow: TextOverflow.ellipsis,                ),              );            }).toList(),            onChanged: (newVal) {              setState(() {                mySelection = newVal as String?;                selected_batch = null;                show = true;                _provider.fetchCourseBatch(mySelection.toString());              });            },            value: mySelection,          ),          const SizedBox(            height: 12,          ),          show == false              ? const SizedBox()              : isLoading(value.courseBatchApiResponse)                  ? const VerticalLoader()                  : value.courseBatch.batches == null ||                          value.courseBatch.batches!.isEmpty                      ? const Text("No batch assigned in this module")                      : Column(                          mainAxisAlignment: MainAxisAlignment.start,                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [                            const Padding(                              padding: EdgeInsets.all(8.0),                              child: Text(                                'Batches',                                style: TextStyle(fontWeight: FontWeight.bold),                              ),                            ),                            DropdownButtonFormField(                              hint: const Text('Select batch'),                              value: selected_batch,                              isExpanded: true,                              decoration: const InputDecoration(                                border: InputBorder.none,                                filled: true,                              ),                              icon: const Icon(Icons.arrow_drop_down_outlined),                              items: value.courseBatch.batches!.map((pt) {                                return DropdownMenuItem(                                  value: pt["batch"],                                  child: Text(                                    pt["batch"],                                    softWrap: true,                                    overflow: TextOverflow.ellipsis,                                  ),                                );                              }).toList(),                              onChanged: (newVal) {                                setState(() {                                  selected_batch = newVal as String?;                                  Map<String, dynamic> request = {                                    "batch": selected_batch,                                    "fromDate": null,                                    "toDate": null                                  };                                  print(request);                                  _provider                                      .fetchAllBatchWiseAttendance(request);                                });                              },                            ),                          ],                        ),          const SizedBox(            height: 10,          ),          selected_batch == null              ? const SizedBox()              : isLoading(value.allBatchAttendanceApiResponse)                  ? const VerticalLoader()                  : value.allBatchAttendance.allAttendance == null                      ? Container()                      : Column(                          children: [                            ...List.generate(                                value.allBatchAttendance.allAttendance!.length,                                (index) {                              var datas = value                                  .allBatchAttendance.allAttendance![index];                              return Container(                                child: Card(                                  child: Column(                                    mainAxisAlignment: MainAxisAlignment.start,                                    crossAxisAlignment:                                        CrossAxisAlignment.start,                                    children: [                                      ListTile(                                        title: RichText(                                          text: TextSpan(                                              text: 'Name: ',                                              style: const TextStyle(                                                  fontWeight: FontWeight.bold,                                                  color: Colors.black),                                              children: [                                                TextSpan(                                                  text:                                                      datas["name"].toString(),                                                  style: const TextStyle(                                                      fontWeight:                                                          FontWeight.normal,                                                      color: Colors.black),                                                ),                                              ]),                                        ),                                        subtitle: datas["contact"] == null                                            ? Text("contact: n/a")                                            : RichText(                                                text: TextSpan(                                                    text: 'contact: ',                                                    style: const TextStyle(                                                        fontWeight:                                                            FontWeight.bold,                                                        color: Colors.black),                                                    children: [                                                      TextSpan(                                                        text: datas["contact"]                                                            .toString(),                                                        style: const TextStyle(                                                            fontWeight:                                                                FontWeight                                                                    .normal,                                                            color:                                                                Colors.black),                                                      ),                                                    ]),                                              ),                                      ),                                      Padding(                                        padding: const EdgeInsets.symmetric(                                            vertical: 8),                                        child: LinearPercentIndicator(                                          lineHeight: 16.0,                                          center: Builder(builder: (context) {                                            return Text(                                              datas["overallPercentage"] + "%",                                              style: const TextStyle(                                                  fontSize: 12,                                                  fontWeight: FontWeight.bold),                                            );                                          }),                                          percent: double.parse(                                                  datas["overallPercentage"]) /                                              100,                                          backgroundColor: Colors.grey.shade100,                                          progressColor: double.parse(datas[                                                      "overallPercentage"]) >=                                                  80                                              ? Colors.green                                              : double.parse(datas[                                                              "overallPercentage"]) >=                                                          50 &&                                                      double.parse(datas[                                                              "overallPercentage"]) <=                                                          80                                                  ? Colors.orange                                                  : double.parse(datas[                                                              "overallPercentage"]) <                                                          50                                                      ? Colors.red                                                      : Colors.blue,                                        ),                                      ),                                    ],                                  ),                                ),                              );                            }),                            const SizedBox(height: 80)                          ],                        )        ],      ));    });  }}