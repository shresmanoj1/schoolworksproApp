import 'dart:convert';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:intl/intl.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:grouped_list/grouped_list.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/prinicpal/principal_common_view_model.dart';import 'package:schoolworkspro_app/Screens/prinicpal/routine/update_routine.dart';import 'package:schoolworkspro_app/Screens/prinicpal/stats_common_view_model.dart';import 'package:schoolworkspro_app/config/api_response_config.dart';import 'package:schoolworkspro_app/constants.dart';import 'package:url_launcher/url_launcher.dart';import '../../../../response/login_response.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../constants/colors.dart';class RoutinePrincipal extends StatefulWidget {  const RoutinePrincipal({Key? key}) : super(key: key);  @override  _RoutinePrincipalState createState() => _RoutinePrincipalState();}class _RoutinePrincipalState extends State<RoutinePrincipal> {  late PrinicpalCommonViewModel _provider;  late StatsCommonViewModel _provider2;  String? selected_teacher;  String? selected_class;  String? selected_batch;  List<String> lecturerList = [];  List<String> classRoomList = [];  List<String> batchList = [];  User? user;  @override  void initState() {    // TODO: implement initState    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider = Provider.of<PrinicpalCommonViewModel>(context, listen: false);      _provider2 = Provider.of<StatsCommonViewModel>(context, listen: false);    });    getUser();    super.initState();  }  getUser() async {    SharedPreferences sharedPreferences = await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('_auth_');    Map<String, dynamic> userMap = json.decode(userData!);    User userD = User.fromJson(userMap);    setState(() {      user = userD;    });    _provider2.fetchFilterRoutines(selected_batch ?? "", selected_teacher ?? "",        selected_class ?? "", user!.institution.toString());  }  Future<void> handleRefresh(StatsCommonViewModel data) async {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      data.fetchAllFilterRoutines(selected_batch ?? "", selected_teacher ?? "",          selected_class ?? "", user!.institution.toString());      data.fetchFilterRoutines(selected_batch ?? "", selected_teacher ?? "",          selected_class ?? "", user!.institution.toString());    });  }  @override  Widget build(BuildContext context) {    return Consumer2<PrinicpalCommonViewModel, StatsCommonViewModel>(        builder: (context, value, stats, child) {      return Scaffold(          appBar: AppBar(            elevation: 0.0,            title: const Text(              "Routines",            ),            actions: [              Row(                children: [                  InkWell(                    onTap: () {                      setState(() {                        selected_teacher = null;                        selected_batch = null;                        selected_class = null;                        stats.fetchFilterRoutines(                            selected_batch ?? "",                            selected_teacher ?? "",                            selected_class ?? "",                            user!.institution.toString());                      });                    },                    child: Container(                      padding: const EdgeInsets.symmetric(                          horizontal: 5, vertical: 5),                      decoration: BoxDecoration(                          color: Colors.red,                          borderRadius: BorderRadius.circular(4)),                      child: const Text("Reset Filter"),                    ),                  ),                  const SizedBox(                    width: 10,                  )                ],              )            ],          ),          body: RefreshIndicator(              onRefresh: () => handleRefresh(stats),              child: ListView(                padding: const EdgeInsets.symmetric(horizontal: 10,vertical: 10.0),                children: [                  Row(                    children: [                      Expanded(                        child: DropdownButtonFormField(                          isExpanded: true,                          decoration: const InputDecoration(                            border: InputBorder.none,                            filled: true,                            hintText: 'Select Lecturer/Teacher',                          ),                          icon: const Icon(Icons.arrow_drop_down_outlined),                          items: stats.filterRoutine.lecturer?.map((pt) {                            return DropdownMenuItem(                              value: pt.email,                              child: Text(                                "${pt.firstname} ${pt.lastname}",                                overflow: TextOverflow.ellipsis,                              ),                            );                          }).toList(),                          onChanged: (newVal) {                            setState(() {                              selected_teacher = newVal as String?;                              stats.fetchFilterRoutines(                                  selected_batch ?? "",                                  selected_teacher ?? "",                                  selected_class ?? "",                                  user!.institution.toString());                              stats.fetchAllFilterRoutines(                                  selected_batch ?? "",                                  selected_teacher ?? "",                                  selected_class ?? "",                                  user!.institution.toString());                            });                          },                          value: selected_teacher,                        ),                      ),                      // IconButton(                      //     onPressed: () {                      //       setState(() {                      //         selected_teacher = null;                      //         stats.fetchFilterRoutines(                      //             selected_batch ?? "",                      //             selected_teacher ?? "",                      //             selected_class ?? "",                      //             user!.institution.toString());                      //         stats.fetchAllFilterRoutines(selected_batch ?? "",                      //             selected_teacher ?? "",                      //             selected_class ?? "",                      //             user!.institution.toString());                      //       });                      //     },                      //     icon: Icon(Icons.close))                    ],                  ),                  const SizedBox(                    height: 10,                  ),                  Row(                    children: [                      Expanded(                        child: DropdownButtonFormField(                          isExpanded: true,                          decoration: const InputDecoration(                            border: InputBorder.none,                            filled: true,                            // hintText: 'Select Classroom',                          ),                          icon: const Icon(Icons.arrow_drop_down_outlined),                          items: stats.filterRoutine.classroom?.map((pt) {                            return DropdownMenuItem(                              value: pt,                              child: Text(                                pt,                                overflow: TextOverflow.ellipsis,                              ),                            );                          }).toList(),                          hint: const Text("Select Classroom"),                          onChanged: (newVal) {                            setState(() {                              selected_class = newVal as String?;                              stats.fetchFilterRoutines(                                  selected_batch ?? "",                                  selected_teacher ?? "",                                  selected_class ?? "",                                  user!.institution.toString());                              stats.fetchAllFilterRoutines(                                  selected_batch ?? "",                                  selected_teacher ?? "",                                  selected_class ?? "",                                  user!.institution.toString());                            });                          },                          value: selected_class,                        ),                      ),                      // IconButton(                      //     onPressed: () {                      //       setState(() {                      //         selected_class = null;                      //         stats.fetchFilterRoutines(                      //             selected_batch ?? "",                      //             selected_teacher ?? "",                      //             selected_class ?? "",                      //             user!.institution.toString());                      //       });                      //     },                      //     icon: const Icon(Icons.close))                    ],                  ),                  const SizedBox(                    height: 10,                  ),                  Row(                    children: [                      Expanded(                        child: DropdownButtonFormField(                          isExpanded: true,                          decoration: const InputDecoration(                            border: InputBorder.none,                            filled: true,                            // hintText: 'Select all Batch',                          ),                          icon: const Icon(Icons.arrow_drop_down_outlined),                          items: stats.filterRoutine.batch?.map((pt) {                            return DropdownMenuItem(                              value: pt.toString(),                              child: Text(                                pt.toString(),                                overflow: TextOverflow.ellipsis,                              ),                            );                          }).toList(),                          hint: const Text("Select Batch"),                          onChanged: (newVal) {                            setState(() {                              selected_batch = newVal as String?;                              stats.fetchFilterRoutines(                                  selected_batch ?? "",                                  selected_teacher ?? "",                                  selected_class ?? "",                                  user!.institution.toString());                              stats.fetchAllFilterRoutines(                                  selected_batch ?? "",                                  selected_teacher ?? "",                                  selected_class ?? "",                                  user!.institution.toString());                            });                          },                          value: selected_batch,                        ),                      ),                      // IconButton(                      //     onPressed: () {                      //       setState(() {                      //         selected_batch = null;                      //         _provider2.fetchFilterRoutines(                      //             selected_batch ?? "",                      //             selected_teacher ?? "",                      //             selected_class ?? "",                      //             user!.institution.toString());                      //       });                      //     },                      //     icon: Icon(Icons.close))                    ],                  ),                  const SizedBox(                    height: 10,                  ),                  selected_class == null &&                          selected_batch == null &&                          selected_teacher == null                      ? SizedBox()                      : isLoading(stats.allRoutineFilterApiResponse)                          ? const Center(                              child: SpinKitDualRing(                                color: kPrimaryColor,                              ),                            )                          : stats.allRoutineFilter.isEmpty                              ? Column(                                  children: [                                    Image.asset("assets/images/no_content.PNG")                                  ],                                )                              : Builder(builder: (context) {                                  return GroupedListView<dynamic, String>(                                    elements: stats.allRoutineFilter,                                    shrinkWrap: true,                                    sort: true,                                    physics: const ScrollPhysics(),                                    groupBy: (element) => getWeekString(                                            DateFormat('EEEE').format(                                                DateTime.parse(element['start'])                                                    .add(Duration(                                                        hours: 5,                                                        minutes: 45))))                                        .toString(),                                    groupComparator: (value1, value2) =>                                        value2.compareTo(value1),                                    itemComparator: (item1, item2) =>                                        DateFormat('EEEE')                                            .format(                                                DateTime.parse(item1['start'])                                                    .add(Duration(                                                        hours: 5, minutes: 45)))                                            .compareTo(DateFormat('EEEE')                                                .format(DateTime.parse(                                                        item2['start'])                                                    .add(Duration(                                                        hours: 5,                                                        minutes: 45)))),                                    order: GroupedListOrder.DESC,                                    useStickyGroupSeparators: true,                                    groupSeparatorBuilder: (String value) =>                                        Padding(                                      padding: const EdgeInsets.all(8.0),                                      child: Builder(builder: (context) {                                        return Text(                                          value.toString() == "1"                                              ? "Sunday"                                              : value.toString() == "2"                                                  ? "Monday"                                                  : value.toString() == "3"                                                      ? "Tuesday"                                                      : value.toString() == "4"                                                          ? "Wednesday"                                                          : value.toString() ==                                                                  "5"                                                              ? "Thursday"                                                              : value.toString() ==                                                                      "6"                                                                  ? "Friday"                                                                  : "Saturday",                                          style: const TextStyle(                                              fontWeight: FontWeight.bold,                                              fontSize: 18),                                        );                                      }),                                    ),                                    itemBuilder: (c, element) {                                      return Padding(                                        padding: const EdgeInsets.symmetric(                                            horizontal: 10.0, vertical: 5),                                        child: Container(                                          decoration: BoxDecoration(                                              color:                                                  element['published'] == false                                                      ? const Color(0XFF6b6b75)                                                      : const Color(0xff38853B),                                              borderRadius:                                                  const BorderRadius.all(                                                      Radius.circular(20))),                                          child: ListTile(                                            onTap: value.hasPermission(                                                    ["manage_all_routine"])                                                ? () {                                                    print(element);                                                    Navigator.push(context,                                                        MaterialPageRoute(                                                            builder: (context) {                                                      return UpdateRoutineScreen(                                                        element: element,                                                        routineId:                                                            element["_id"],                                                      );                                                    })).then((value) {                                                      handleRefresh(stats);                                                    });                                                  }                                                : () {                                                    DateTime start =                                                        DateTime.parse(                                                            element['start']                                                                .toString());                                                    var startDate =                                                        DateFormat('hh:mm a')                                                            .format(start.add(                                                                const Duration(                                                                    hours: 5,                                                                    minutes:                                                                        45)));                                                    var day = DateFormat('EEEE')                                                        .format(start);                                                    DateTime end =                                                        DateTime.parse(                                                            element['end']                                                                .toString());                                                    var endDate =                                                        DateFormat('hh:mm a')                                                            .format(end.add(                                                                const Duration(                                                                    hours: 5,                                                                    minutes:                                                                        45)));                                                    showDialog(                                                        context: context,                                                        builder: (BuildContext                                                            context) {                                                          return AlertDialog(                                                              title: Column(                                                                children: [                                                                  Text(day),                                                                  Text(                                                                      "$startDate-$endDate"),                                                                ],                                                              ),                                                              content: SizedBox(                                                                height: element['classLink'] ==                                                                            null ||                                                                        element['classLink']                                                                            .isEmpty ||                                                                        element['classLink'].length <                                                                            0                                                                    ? 200                                                                    : 250,                                                                child:                                                                    SingleChildScrollView(                                                                  child: Column(                                                                    mainAxisAlignment:                                                                        MainAxisAlignment                                                                            .start,                                                                    crossAxisAlignment:                                                                        CrossAxisAlignment                                                                            .start,                                                                    children: [                                                                      element["isCancelled"] == null ||                                                                              element["cancelledDate"] == null                                                                          ? Container()                                                                          : element["isCancelled"] == true                                                                              ? Text(                                                                                  "Class cancelled for: ${DateTime.parse(element["cancelledDate"].toString()).day}/${DateTime.parse(element["cancelledDate"].toString()).month}/${DateTime.parse(element["cancelledDate"].toString()).year}",                                                                                  style: const TextStyle(color: Colors.red),                                                                                )                                                                              : Container(),                                                                      Text(                                                                          'Subject: ${element["title"]}'),                                                                      Text(                                                                          'Block: ${element["block"]}'),                                                                      Text(                                                                          'Class Room: ${element["classRoom"]}'),                                                                      Text(                                                                          'Lecturer: ${element["lecturer"]['firstname'] + " " + element["lecturer"]['lastname']}'),                                                                      element["effectiveDate"] !=                                                                              null                                                                          ? Text(                                                                              'Effective Date: ${DateFormat("d MMM , h:mm a").format(DateTime.parse(element["effectiveDate"]).add(const Duration(hours: 5, minutes: 45)))}')                                                                          : const SizedBox(),                                                                      InkWell(                                                                        onTap:                                                                            () {                                                                          launch(                                                                              element["classLink"]);                                                                        },                                                                        child: Text(                                                                            'class link: ${element["classLink"]}'),                                                                      ),                                                                    ],                                                                  ),                                                                ),                                                              ));                                                        });                                                  },                                            contentPadding:                                                const EdgeInsets.symmetric(                                              horizontal: 20.0,                                            ),                                            title: Text(                                              element['title'],                                              style:                                                  const TextStyle(color: white),                                            ),                                            subtitle: Column(                                              crossAxisAlignment:                                                  CrossAxisAlignment.start,                                              children: [                                                Row(                                                  children: [                                                    Text(                                                      DateFormat.jm()                                                          .format(DateTime.parse(                                                                  element[                                                                      'start'])                                                              .add(                                                                  const Duration(                                                                      hours: 5,                                                                      minutes:                                                                          45)))                                                          .toString(),                                                      style: const TextStyle(                                                          color: white),                                                    ),                                                    const Text(                                                      ' - ',                                                      style: TextStyle(                                                          color: white),                                                    ),                                                    Text(                                                      DateFormat.jm()                                                          .format(DateTime.parse(                                                                  element[                                                                      'end'])                                                              .add(                                                                  const Duration(                                                                      hours: 5,                                                                      minutes:                                                                          45)))                                                          .toString(),                                                      style: const TextStyle(                                                          color: white),                                                    ),                                                  ],                                                ),                                                const SizedBox(                                                  width: 10,                                                ),                                                element["isCancelled"] == null                                                    ? Container()                                                    : element['isCancelled'] ==                                                            true                                                        ? Container(                                                            padding:                                                                const EdgeInsets                                                                        .symmetric(                                                                    horizontal:                                                                        4,                                                                    vertical:                                                                        1),                                                            decoration: BoxDecoration(                                                                color: Colors                                                                    .red[400],                                                                borderRadius:                                                                    const BorderRadius                                                                            .all(                                                                        Radius.circular(                                                                            4))),                                                            child: const Text(                                                              "Class Cancelled",                                                              style: TextStyle(                                                                  color: Colors                                                                      .white),                                                            ),                                                          )                                                        : Container()                                              ],                                            ),                                          ),                                        ),                                      );                                    },                                  );                                }),                ],              )));    });  }  dynamic getWeekString(dynamic data) {    switch (data) {      case "Sunday":        return 1;      case "Monday":        return 2;      case "Tuesday":        return 3;      case "Wednesday":        return 4;      case "Thursday":        return 5;      case "Friday":        return 6;      case "Saturday":        return 7;      default:        return 'Err';    }  }}