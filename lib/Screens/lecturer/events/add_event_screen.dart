import 'dart:convert';import 'package:date_time_picker/date_time_picker.dart';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:multi_select_flutter/dialog/multi_select_dialog_field.dart';import 'package:multi_select_flutter/util/multi_select_item.dart';import 'package:multi_select_flutter/util/multi_select_list_type.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/lecturer/events/lecturer_event_view_model.dart';import 'package:schoolworkspro_app/Screens/widgets/snack_bar.dart';import 'package:schoolworkspro_app/components/shimmer.dart';import 'package:schoolworkspro_app/config/api_response_config.dart';import 'package:schoolworkspro_app/request/lecturer/add_event_request.dart';import 'package:schoolworkspro_app/response/principal/AddEventResponse.dart';import 'package:schoolworkspro_app/services/event_service.dart';import '../../prinicpal/principal_common_view_model.dart';class AddEventScreen extends StatefulWidget {  final Map<String, dynamic>? data;  final bool isUpdate;  const AddEventScreen({Key? key, this.data, required this.isUpdate})      : super(key: key);  @override  State<AddEventScreen> createState() => _AddEventScreenState();}class _AddEventScreenState extends State<AddEventScreen> {  late LecturerEventViewModel _provider;  late PrinicpalCommonViewModel _provider2;  final TextEditingController topic_controller =      TextEditingController();  final TextEditingController eventDetailController =      TextEditingController();  final TextEditingController studentFeeController =      TextEditingController();  final TextEditingController parentFeeController =      TextEditingController();  DateTime? _fromdatecontroller;  DateTime? _examStartTime;  DateTime? _examLastTime;  DateTime? _todatecontroller;  bool register = false;  String eventType = "Holiday";  final _formKey = GlobalKey<FormState>();  bool _isLoading = false;  String eventId = "";  String? SelectedAlumnus;  String? selectedExamType;  List<String>? selectedModuleSlug;  List eventForList = [    {"value": "Common", "name": "All"},    {"value": "Student", "name": "Student"},    {"value": "Course", "name": "Course/Class"},    {"value": "Batch", "name": "Batch/Section"},    {"value": "Staff", "name": "Staff"},  ];  String eventFor = "Common";  @override  void initState() {    if(widget.data != null){      topic_controller.text = widget.data!["title"].toString();      eventDetailController.text = widget.data!["detail"].toString();      _fromdatecontroller = widget.data!["from"];      _todatecontroller = widget.data!["to"];      eventId = widget.data!["id"].toString();      if(widget.data!["type"] != "Holiday"){        eventFor = widget.data!["type"].toString();        eventType = "Normal";      }    }    WidgetsBinding.instance.addPostFrameCallback((_) {      _provider = Provider.of<LecturerEventViewModel>(context, listen: false);      _provider2 = Provider.of<PrinicpalCommonViewModel>(context, listen: false);      _provider.fetchTerminal();      _provider2.fetchAllModules();    });    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(          elevation: 0.0,          title: const Text("Create a new Event",              ),          ),      body: Consumer2<LecturerEventViewModel, PrinicpalCommonViewModel>(        builder: (context, snapshot, module, child) {          return isLoading(snapshot.terminalApiResponse) || isLoading(module.modulesApiResponse) ? VerticalLoader() :          SafeArea(              child: Padding(            padding: const EdgeInsets.symmetric(horizontal: 15),            child: Form(                key: _formKey,                child: ListView(                  shrinkWrap: true,                  children: [                    const SizedBox(height: 10,),                    const Text(                      'Event Type:',                      style: TextStyle(fontSize: 16),                    ),                    const SizedBox(                      height: 5,                    ),                    IgnorePointer(                      ignoring: widget.isUpdate,                        child: DropdownButtonFormField(                      isExpanded: true,                      decoration: const InputDecoration(                        enabledBorder: OutlineInputBorder(                            borderSide:                                BorderSide(color: Colors.black38)),                        focusedBorder: OutlineInputBorder(                            borderSide:                                BorderSide(color: Colors.black38)),                        border: OutlineInputBorder(),                        filled: true,                        hintText: 'Select event type',                      ),                      icon: const Icon(Icons.arrow_drop_down_outlined),                      items: ["Holiday", "Normal"].map((item) {                        return DropdownMenuItem(                          value: item,                          child: Text(                            item,                            overflow: TextOverflow.ellipsis,                          ),                        );                      }).toList(),                      onChanged: (newVal) async {                        setState(() {                          eventType = newVal as String;                        });                      },                      value: eventType,                    )),                    const SizedBox(                      height: 15,                    ),                    const Text(                      'Event Title:',                      style: TextStyle(fontSize: 16),                    ),                    const SizedBox(                      height: 5,                    ),                   eventType != "Exam" ?                   TextFormField(                      validator: (value) {                        if (value == null || value.isEmpty) {                          return 'Topic cannot be empty';                        }                        return null;                      },                      controller: topic_controller,                      keyboardType: TextInputType.text,                      decoration: const InputDecoration(                        enabledBorder: OutlineInputBorder(                            borderSide:                                BorderSide(color: Colors.black38)),                        focusedBorder: OutlineInputBorder(                            borderSide:                                BorderSide(color: Colors.black38)),                        border: OutlineInputBorder(),                        filled: true,                      ),                    ) : snapshot.data.terminal == null ? const SizedBox() :                   DropdownButtonFormField(                     isExpanded: true,                     decoration: const InputDecoration(                       enabledBorder: OutlineInputBorder(                           borderSide:                           BorderSide(color: Colors.black38)),                       focusedBorder: OutlineInputBorder(                           borderSide:                           BorderSide(color: Colors.black38)),                       border: OutlineInputBorder(),                       filled: true,                       hintText: 'Exam Type',                     ),                     icon: const Icon(Icons.arrow_drop_down_outlined),                     items:  snapshot.data.terminal?.map((item) {                       return DropdownMenuItem(                         value: item.terminalName.toString(),                         child: Text(                           item.terminalName.toString(),                           overflow: TextOverflow.ellipsis,                         ),                       );                     }).toList(),                     onChanged: (newVal) async {                       setState(() {                         selectedExamType = newVal as String;                       });                     },                     value: selectedExamType,                   ),                    const SizedBox(                      height: 15,                    ),                    eventType == "Exam" ?                    Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        const Text(                          'Modules/Subjects:',                          style: TextStyle(fontSize: 16),                        ),                        const SizedBox(                          height: 5,                        ),                        module.modules == null ? SizedBox():                        MultiSelectDialogField(                          // validator: ,                          items: module.modules                              .map((e) =>                              MultiSelectItem(e.moduleSlug.toString(), e.moduleTitle.toString()))                              .toList(),                          listType: MultiSelectListType.CHIP,                          // initialValue: widget.taskData.batch,                          autovalidateMode: AutovalidateMode.always,                          onConfirm: (List<String> values) {                            setState(() {                              selectedModuleSlug = values;                            });                          },                        ),                      // DropdownButtonFormField(                      //   isExpanded: true,                      //   decoration: const InputDecoration(                      //     enabledBorder: OutlineInputBorder(                      //         borderSide:                      //         BorderSide(color: Colors.black38)),                      //     focusedBorder: OutlineInputBorder(                      //         borderSide:                      //         BorderSide(color: Colors.black38)),                      //     border: OutlineInputBorder(),                      //     filled: true,                      //     hintText: 'Select Module/Subject',                      //   ),                      //   icon: const Icon(Icons.arrow_drop_down_outlined),                      //   items: module.modules.map((item) {                      //     return DropdownMenuItem(                      //       value: item.moduleSlug.toString(),                      //       child: Text(                      //         item.moduleTitle.toString(),                      //         overflow: TextOverflow.ellipsis,                      //       ),                      //     );                      //   }).toList(),                      //   onChanged: (newVal) async {                      //     setState(() {                      //       selectedModuleSlug = newVal as String;                      //     });                      //   },                      //   value: selectedModuleSlug,                      // ),                        const SizedBox(                          height: 15,                        ),                        Row(                          mainAxisAlignment:                          MainAxisAlignment.start,                          children: [                            Expanded(                              child: Column(                                crossAxisAlignment:                                CrossAxisAlignment.start,                                children: [                                  const Text(                                    "Exam Start Time",                                    style: TextStyle(fontSize: 16),                                  ),                                  const SizedBox(                                    height: 5,                                  ),                                  DateTimePicker(                                    type: DateTimePickerType.time,                                    // dateMask: '00:00',                                    // initialValue: _examStartTime.toString(),                                    decoration: const InputDecoration(                                        suffixIcon: Icon(                                          Icons.calendar_today,                                        ),                                        enabledBorder: OutlineInputBorder(                                            borderSide:                                            BorderSide(color: Colors.black38)),                                        focusedBorder: OutlineInputBorder(                                            borderSide:                                            BorderSide(color: Colors.black38)),                                        border: OutlineInputBorder(),                                        filled: true,                                        hintText: "00:00"),                                    // firstDate: DateTime(2000),                                    // lastDate: DateTime(2100),                                    icon: const Icon(Icons.event),                                    dateLabelText: 'Date',                                    timeLabelText: "Hour",                                    timePickerEntryModeInput: true,                                    onChanged: (val) {                                      setState(() {                                        _examStartTime = DateTime.parse(val);                                      });                                    },                                    validator: (value) {                                      if (value == null || value.isEmpty) {                                        return 'Exam Start Date cannot be empty';                                      }                                      return null;                                    },                                  ),                                ],                              ),                            ),                            SizedBox(                              width: 5,                            ),                            Expanded(                              child: Column(                                crossAxisAlignment:                                CrossAxisAlignment.start,                                children: [                                  const Text(                                    "Exam End Time",                                    style: TextStyle(fontSize: 16),                                  ),                                  const SizedBox(                                    height: 5,                                  ),                                  DateTimePicker(                                    type: DateTimePickerType.time,                                    // dateMask: 'd MMM, yyyy',                                    // initialValue: _examLastTime.toString(),                                    decoration: const InputDecoration(                                        suffixIcon: Icon(                                          Icons.calendar_today,                                        ),                                        enabledBorder: OutlineInputBorder(                                            borderSide:                                            BorderSide(color: Colors.black38)),                                        focusedBorder: OutlineInputBorder(                                            borderSide:                                            BorderSide(color: Colors.black38)),                                        border: OutlineInputBorder(),                                        filled: true,                                        hintText: "00:00"),                                    // firstDate: DateTime(2000),                                    // lastDate: DateTime(2100),                                    icon: const Icon(Icons.event),                                    dateLabelText: 'Date',                                    timeLabelText: "Hour",                                    timePickerEntryModeInput: true,                                    onChanged: (val) {                                      setState(() {                                        _examLastTime = DateTime.parse(val);                                      });                                    },                                    validator: (value) {                                      if (value == null || value.isEmpty) {                                        return 'Exam Last Date cannot be empty';                                      }                                      return null;                                    },                                  ),                                ],                              ),                            )                          ],                        ),                    ],) : SizedBox(),                    const SizedBox(                      height: 15,                    ),                    eventType != "Graduation"                        ? const SizedBox()                        : Column(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              Row(                                mainAxisAlignment:                                    MainAxisAlignment.start,                                children: [                                  Expanded(                                    child: Column(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        const Text(                                          "Student's Fee:",                                          style: TextStyle(fontSize: 16),                                        ),                                        const SizedBox(                                          height: 5,                                        ),                                        TextFormField(                                          validator: (value) {                                            if (value == null ||                                                value.isEmpty) {                                              return "Student's Fee cannot be empty";                                            }                                            return null;                                          },                                          controller:                                              studentFeeController,                                          keyboardType:                                              TextInputType.text,                                          decoration:                                              const InputDecoration(                                            enabledBorder:                                                OutlineInputBorder(                                                    borderSide: BorderSide(                                                        color: Colors                                                            .black38)),                                            focusedBorder:                                                OutlineInputBorder(                                                    borderSide: BorderSide(                                                        color: Colors                                                            .black38)),                                            border: OutlineInputBorder(),                                            filled: true,                                          ),                                        ),                                      ],                                    ),                                  ),                                  SizedBox(                                    width: 5,                                  ),                                  Expanded(                                    child: Column(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        const Text(                                          "Parent's Fee",                                          style: TextStyle(fontSize: 16),                                        ),                                        const SizedBox(                                          height: 5,                                        ),                                        TextFormField(                                          validator: (value) {                                            if (value == null ||                                                value.isEmpty) {                                              return "Parent's Fee cannot be empty";                                            }                                            return null;                                          },                                          controller: parentFeeController,                                          keyboardType:                                              TextInputType.text,                                          decoration:                                              const InputDecoration(                                            enabledBorder:                                                OutlineInputBorder(                                                    borderSide: BorderSide(                                                        color: Colors                                                            .black38)),                                            focusedBorder:                                                OutlineInputBorder(                                                    borderSide: BorderSide(                                                        color: Colors                                                            .black38)),                                            border: OutlineInputBorder(),                                            filled: true,                                          ),                                        ),                                      ],                                    ),                                  )                                ],                              ),                              SizedBox(height: 15,),                              Column(                                crossAxisAlignment:                                    CrossAxisAlignment.start,                                children: [                                  const Text(                                    'Alumnus Batch/Section',                                    style: TextStyle(fontSize: 16),                                  ),                                  const SizedBox(                                    height: 5,                                  ),                                  DropdownButtonFormField(                                    isExpanded: true,                                    decoration: const InputDecoration(                                      enabledBorder: OutlineInputBorder(                                          borderSide:                                          BorderSide(color: Colors.black38)),                                      focusedBorder: OutlineInputBorder(                                          borderSide:                                          BorderSide(color: Colors.black38)),                                      border: OutlineInputBorder(),                                      filled: true,                                      hintText: 'Select Alumnus Batch/Section',                                    ),                                    icon: const Icon(Icons.arrow_drop_down_outlined),                                    items: ["Tedt"].map((item) {                                      return DropdownMenuItem(                                        value: item,                                        child: Text(                                          item,                                          overflow: TextOverflow.ellipsis,                                        ),                                      );                                    }).toList(),                                    onChanged: (newVal) async {                                      setState(() {                                        SelectedAlumnus = newVal as String;                                      });                                    },                                    value: SelectedAlumnus,                                  ),                                  const SizedBox(                                    height: 15,                                  ),                                ],                              ),                            ],                          ),                    eventType == "Holiday" || eventType == "Graduation" || eventType == "Exam"                        ? SizedBox()                        : Column(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              const Text(                                'Event For:',                                style: TextStyle(fontSize: 16),                              ),                              const SizedBox(                                height: 5,                              ),                              DropdownButtonFormField(                                isExpanded: true,                                decoration: const InputDecoration(                                  enabledBorder: OutlineInputBorder(                                      borderSide: BorderSide(                                          color: Colors.black38)),                                  focusedBorder: OutlineInputBorder(                                      borderSide: BorderSide(                                          color: Colors.black38)),                                  border: OutlineInputBorder(),                                  filled: true,                                ),                                icon: const Icon(                                    Icons.arrow_drop_down_outlined),                                items: eventForList.map((item) {                                  return DropdownMenuItem(                                    value: item["value"],                                    child: Text(                                      item["name"],                                      overflow: TextOverflow.ellipsis,                                    ),                                  );                                }).toList(),                                onChanged: (newVal) async {                                  setState(() {                                    eventFor = newVal as String;                                  });                                },                                value: eventFor,                              ),                              const SizedBox(                                height: 15,                              ),                            ],                          ),                    const Text(                      'Event Detail:',                      style: TextStyle(fontSize: 16),                    ),                    const SizedBox(                      height: 5,                    ),                    TextFormField(                      validator: (value) {                        if (value == null || value.isEmpty) {                          return 'Details cannot be empty';                        }                        return null;                      },                      keyboardType: TextInputType.multiline,                      maxLines: 3,                      controller: eventDetailController,                      decoration: const InputDecoration(                        enabledBorder: OutlineInputBorder(                            borderSide:                                BorderSide(color: Colors.black38)),                        focusedBorder: OutlineInputBorder(                            borderSide:                                BorderSide(color: Colors.black38)),                        border: OutlineInputBorder(),                        filled: true,                      ),                    ),                    const SizedBox(                      height: 15,                    ),                    Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                      const Text(                        'Start Date:',                        style: TextStyle(fontSize: 16),                      ),                      const SizedBox(                        height: 5,                      ),                      DateTimePicker(                        type: DateTimePickerType.date,                        dateMask: 'd MMM, yyyy',                        initialValue: _fromdatecontroller.toString(),                        decoration: const InputDecoration(                            suffixIcon: Icon(                              Icons.calendar_today,                            ),                            enabledBorder: OutlineInputBorder(                                borderSide:                                BorderSide(color: Colors.black38)),                            focusedBorder: OutlineInputBorder(                                borderSide:                                BorderSide(color: Colors.black38)),                            border: OutlineInputBorder(),                            filled: true,                            hintText: "dd/mm/yy"),                        firstDate: DateTime(2000),                        lastDate: DateTime(2100),                        icon: const Icon(Icons.event),                        dateLabelText: 'Date',                        timeLabelText: "Hour",                        timePickerEntryModeInput: true,                        onChanged: (val) {                          setState(() {                            _fromdatecontroller = DateTime.parse(val);                          });                        },                        validator: (value) {                          if (value == null || value.isEmpty) {                            return 'Start cannot be empty';                          }                          return null;                        },                      ),                      const SizedBox(                        height: 15,                      ),                      const Text(                        'End Date:',                        style: TextStyle(fontSize: 16),                      ),                      const SizedBox(                        height: 5,                      ),                      DateTimePicker(                        decoration: const InputDecoration(                            suffixIcon: Icon(                              Icons.calendar_today,                            ),                            enabledBorder: OutlineInputBorder(                                borderSide:                                BorderSide(color: Colors.black38)),                            focusedBorder: OutlineInputBorder(                                borderSide:                                BorderSide(color: Colors.black38)),                            border: OutlineInputBorder(),                            filled: true,                            hintText: "dd/mm/yy"),                        type: DateTimePickerType.date,                        dateMask: 'd MMM, yyyy',                        initialValue: _todatecontroller.toString(),                        firstDate: DateTime(2000),                        lastDate: DateTime(2100),                        icon: const Icon(Icons.event),                        dateLabelText: 'Date',                        timeLabelText: "Hour",                        timePickerEntryModeInput: true,                        onChanged: (val) {                          setState(() {                            _todatecontroller = DateTime.parse(val);                          });                        },                        validator: (value) {                          if (value == null || value.isEmpty) {                            return 'End cannot be empty';                          }                          return null;                        },                      ),                    ],),                    eventType == "Holiday"                        ? SizedBox()                        : Row(                            children: [                              Transform.scale(                                scale: 1.5,                                child: Switch(                                    value: register,                                    onChanged: (value) {                                      setState(() {                                        register = value;                                      });                                    }),                              ),                              const Text(                                "Participate need to register",                                style: TextStyle(fontSize: 16),                              )                            ],                          ),                    const SizedBox(                      height: 15,                    ),                    Row(                      mainAxisAlignment: MainAxisAlignment.center,                      crossAxisAlignment: CrossAxisAlignment.center,                      children: <Widget>[                        Padding(                          padding: const EdgeInsets.only(                              left: 15.0, top: 15.0),                          child: SizedBox(                            height: 40,                            width: 95,                            child: ElevatedButton(                              onPressed: _isLoading == true ? (){} :                             widget.data == null ? (){                                holidayEvent();                              } : (){                               updateHolidayEvent();                             },                              style: ButtonStyle(                                  backgroundColor:                                      MaterialStateProperty.all(                                          Colors.redAccent),                                  shape: MaterialStateProperty.all<                                          RoundedRectangleBorder>(                                      RoundedRectangleBorder(                                    borderRadius:                                        BorderRadius.circular(8.0),                                  ))),                              child: _isLoading == true                                  ? const SizedBox(                                      height: 30,                                      child: CircularProgressIndicator(                                        color: Colors.white,                                        strokeWidth: 2,                                      ))                                  : Text(                                      widget.isUpdate == true ? "Update" : "Save",                                      style: TextStyle(                                          fontSize: 14,                                          color: Colors.white),                                    ),                            ),                          ),                        ),                        Padding(                          padding: const EdgeInsets.only(                              left: 15.0, top: 15.0),                          child: SizedBox(                            height: 40,                            width: 95,                            child: ElevatedButton(                              style: ButtonStyle(                                  backgroundColor:                                      MaterialStateProperty.all(                                          Colors.black),                                  shape: MaterialStateProperty.all<                                          RoundedRectangleBorder>(                                      RoundedRectangleBorder(                                    borderRadius:                                        BorderRadius.circular(8.0),                                  ))),                              onPressed: () {                                Navigator.pop(context);                              },                              child: const Text("Cancel",                                  style: TextStyle(                                      fontSize: 14, color: Colors.white)),                            ),                          ),                        ),                      ],                    ),                    SizedBox(                      height: 50,                    ),                  ],                )),          ));        }      ),    );  }  void holidayEvent() async {    setState(() {      _isLoading = true;    });    try {      setState(() {        _isLoading = true;      });      print("EVENT TYPE:::$eventType");      print("EVENT for:::$eventType");      if(_fromdatecontroller == null && _todatecontroller == null){        snackThis(            context: context,            content: const Text("Date can't be empty"),            color: Colors.red,            duration: 1,            behavior: SnackBarBehavior.floating);        setState(() {          _isLoading = false;        });      }      else if (_formKey.currentState!.validate() && _fromdatecontroller != null && _todatecontroller != null ) {        final request = AddEventRequest(            eventType: eventType == "Normal" ? eventFor : eventType,            startDate: _fromdatecontroller.toString(),            endDate: _todatecontroller.toString(),            eventTitle: topic_controller.text,            isPublic: false,            detail: eventDetailController.text,            isRegistrable: register,            passedOut: false);        print("REQUEST DATA:::");        print(request.toJson());        AddEventResponse res =            await EventService().addEvents(request);        if (res.success == true) {          setState(() {            _isLoading = false;          });          Navigator.of(context).popUntil((route)=> route.isFirst);          eventDetailController.clear();          topic_controller.clear();          snackThis(              context: context,              content: Text(res.message.toString()),              color: Colors.green,              duration: 1,              behavior: SnackBarBehavior.floating);        } else {          setState(() {            _isLoading = false;          });          snackThis(              context: context,              content: Text(res.message.toString()),              color: Colors.red,              duration: 1,              behavior: SnackBarBehavior.floating);        }      }      setState(() {        _isLoading = false;      });    } catch (e) {      setState(() {        _isLoading = true;      });      snackThis(          context: context,          content: Text(e.toString()),          color: Colors.red,          duration: 1,          behavior: SnackBarBehavior.floating);      setState(() {        _isLoading = false;      });    }  }  void updateHolidayEvent() async {    setState(() {      _isLoading = true;    });    try {      setState(() {        _isLoading = true;      });      if (_formKey.currentState!.validate()) {        final request = AddEventRequest(            eventType: eventType == "Normal" ? eventFor : eventType,            startDate: _fromdatecontroller.toString(),            endDate: _todatecontroller.toString(),            eventTitle: topic_controller.text,            isPublic: false,            detail: eventDetailController.text,            isRegistrable: register,            // moduleSlug: null,            passedOut: false);        AddEventResponse res =        await EventService().updateEvents(request, eventId.toString());        if (res.success == true) {          setState(() {            _isLoading = false;          });          Navigator.of(context).popUntil((route)=> route.isFirst);          eventDetailController.clear();          topic_controller.clear();          snackThis(              context: context,              content: Text("Event successfully updated"),              color: Colors.green,              duration: 1,              behavior: SnackBarBehavior.floating);        } else {          setState(() {            _isLoading = false;          });          snackThis(              context: context,              content: Text("Unable to update Event"),              color: Colors.red,              duration: 1,              behavior: SnackBarBehavior.floating);        }      }      setState(() {        _isLoading = false;      });    } catch (e) {      setState(() {        _isLoading = true;      });      snackThis(          context: context,          content: Text("Failed"),          color: Colors.red,          duration: 1,          behavior: SnackBarBehavior.floating);      setState(() {        _isLoading = false;      });    }  }}