import 'dart:convert';import 'dart:developer';import 'package:flutter/material.dart';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/widgets/snack_bar.dart';import 'package:schoolworkspro_app/constants.dart';import 'package:schoolworkspro_app/request/lecturer/studentattendance_request.dart';import 'package:schoolworkspro_app/response/lecturer/getstudent_batchresponse.dart';import 'package:schoolworkspro_app/services/lecturer/getstudent_service.dart';import 'package:schoolworkspro_app/services/lecturer/post_attendanceservice.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../../attendance_view_model.dart';import '../../../../config/api_response_config.dart';import '../../../../response/login_response.dart';import '../../lecturer_common_view_model.dart';import 'attendance_lecturer_view_model.dart';class OneTimeAttendanceDetail extends StatefulWidget {  final batch;  final date;  final absent_student;  final present_student;  final module_slug;  final id;  const OneTimeAttendanceDetail(      {Key? key,        this.batch,        this.id,        this.date,        this.module_slug,        this.absent_student,        this.present_student})      : super(key: key);  @override  _OneTimeeAttendanceDetailState createState() => _OneTimeeAttendanceDetailState();}class _OneTimeeAttendanceDetailState extends State<OneTimeAttendanceDetail> {  late Future<GetStudentByBatchResponse> student_response;  bool _value = false;  Icon cusIcon = Icon(Icons.search);  late Widget cusSearchBar;  final TextEditingController _searchController =  TextEditingController();  List<dynamic> _presentStudents = <dynamic>[];  List<dynamic> _absentStudents = <dynamic>[];  List<dynamic> _list = <dynamic>[];  List<dynamic> _listForDisplay = <dynamic>[];  List<bool> _isChecked = <bool>[];  late User user;  late AttendanceViewModel _provider;  @override  void initState() {    // TODO: implement initState    _provider = Provider.of<AttendanceViewModel>(context, listen: false);    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider.checkAttendanceEditable(widget.id);    });    cusSearchBar = Text(      widget.date,      style: const TextStyle(color: Colors.black),    );    getData();    getUser();    super.initState();  }  getUser() async {    SharedPreferences sharedPreferences =    await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('_auth_');    Map<String, dynamic> userMap = json.decode(userData!);    User userD = User.fromJson(userMap);    setState(() {      user = userD;    });  }  getData() async {     _provider.fetchStudentOnlyForAttendance(widget.batch).then((value){      for (int i = 0; i < _provider.studentOnlyForAttendanceList.length; i++) {        setState(() {          _list.add(_provider.studentOnlyForAttendanceList[i]);          _listForDisplay = _list;        });      }    });    _presentStudents.addAll(widget.present_student);    _absentStudents.addAll(widget.absent_student);  }  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: AppBar(          iconTheme: const IconThemeData(            color: Colors.black,          ),          actions: [            IconButton(                onPressed: () {                  setState(() {                    if (cusIcon.icon == Icons.search) {                      cusIcon = const Icon(                        Icons.cancel,                        color: Colors.grey,                      );                      cusSearchBar = TextField(                        autofocus: true,                        textInputAction: TextInputAction.go,                        controller: _searchController,                        decoration: const InputDecoration(                            hintStyle: TextStyle(color: Colors.black),                            border: InputBorder.none,                            hintText: "Search by name..."),                        onChanged: (text) {                          setState(() {                            _listForDisplay = _list.where((list) {                              var name = list['firstname'] +                                  ' ' +                                  list['lastname'];                              var itemName = name.toLowerCase();                              return itemName.contains(text);                            }).toList();                          });                        },                      );                    } else {                      setState(() {                        _listForDisplay.clear();                        _listForDisplay = _list;                        _searchController.clear();                      });                      cusIcon = const Icon(Icons.search);                      cusSearchBar = Text(                        widget.date,                        style: const TextStyle(color: Colors.black),                      );                    }                  });                },                icon: cusIcon)          ],          backgroundColor: Colors.white,          elevation: 0.0,          title: cusSearchBar,        ),        body: Consumer2<ModuleAttendanceLecturer, AttendanceViewModel>(            builder: (context, attendance, snapShot, child) {              return              _listForDisplay.length > 0                  ? Column(                children: [                  isLoading(snapShot.attendanceEditableApiResponse) ? const SizedBox() :                  snapShot.editableAttendance.canEdit == null ? Container() :                  Padding(                    padding: const EdgeInsets.symmetric(horizontal: 10),                    child: Container(                        padding:                        const EdgeInsets.symmetric(horizontal: 20, vertical: 10),                        decoration: BoxDecoration(                            borderRadius: BorderRadius.circular(4),                            color: const Color(0xfffff5e9)),                        child: const Text(                          "You can no longer edit this attendance. The editable time frame for this attendance has passed. Please contact administrative if you still wish to update the attendance.",                          style: TextStyle(color: Color(0xffff9b20)),                        )),                  ),                  const SizedBox(height: 20,),                  SizedBox(                    height: 50,                    width: double.infinity,                    child: Row(                      mainAxisAlignment:                      MainAxisAlignment.spaceBetween,                      children: [                        Row(                          children: [                            const Padding(                              padding: EdgeInsets.only(left: 18.0),                              child: Text(                                'Mark All',                                style: TextStyle(                                    fontWeight: FontWeight.bold),                              ),                            ),                            Checkbox(                              value: _value,                              activeColor: Colors.green,                              onChanged: (value) {                                setState(() {                                  if (value!) {                                    for (int i = 0;                                    i < _listForDisplay.length;                                    i++) {                                      setState(() {                                        _absentStudents.clear();                                        _presentStudents.add(                                            _listForDisplay[i]                                            ['username']);                                        _value = true;                                      });                                    }                                  } else {                                    _value = false;                                    setState(() {                                      _presentStudents.clear();                                    });                                  }                                });                              },                            ),                          ],                        ),                        Padding(                          padding:                          const EdgeInsets.only(right: 25.0),                          child: ElevatedButton(                              style: ButtonStyle(                                backgroundColor:                                MaterialStateProperty.all(                                    Colors.green),                              ),                              onPressed: () async {                                final request =                                StudentAttendanceRequest(                                    batch: widget.batch,                                    absentStudents:                                    _absentStudents,                                    moduleSlug:                                    widget.module_slug,                                    presentStudents:                                    _presentStudents);                                try {                                  final response =                                  await PostAttendanceService()                                      .changeAttendance(                                      request, widget.id);                                  if (response.success == true) {                                    Provider.of<ModuleAttendanceLecturer>(                                        context,                                        listen: false)                                        .fetchCheckAttendance(                                        widget.module_slug,                                        widget.batch);                                    Provider.of<ModuleAttendanceLecturer>(                                        context,                                        listen: false)                                        .fetchStudentAttendance(                                        widget.module_slug,                                        widget.batch);                                    snackThis(                                      context: context,                                      content: Text(                                          "${response.message}"),                                      color: Colors.green,                                    );                                    Navigator.of(context).pop();                                  } else {                                    snackThis(                                      context: context,                                      content: Text(                                          "${response.message}"),                                      color: Colors.red,                                    );                                  }                                } catch (e) {                                  Fluttertoast.showToast(                                      msg: e.toString());                                }                              },                              child: const Text("Save")),                        ),                      ],                    ),                  ),                  Expanded(                    child: SingleChildScrollView(                      child: ListView.builder(                        shrinkWrap: true,                        physics:                        const NeverScrollableScrollPhysics(),                        itemBuilder: (context, index) {                          return _listItem(index);                        },                        itemCount: _listForDisplay.length,                      ),                    ),                  ),                ],              )                  : const Center(                child: Padding(                  padding: EdgeInsets.symmetric(                      horizontal: 8.0, vertical: 10.0),                  child: Text(                    "No student available",                    style: TextStyle(color: Colors.red),                  ),                ),              );            }));  }  _listItem(index) {    return Column(      mainAxisAlignment: MainAxisAlignment.start,      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Padding(            padding: const EdgeInsets.all(8.0),            child: ListTile(              trailing: Builder(builder: (context) {                return Checkbox(                  value: _presentStudents.contains(_listForDisplay[index]['username']),                  activeColor: Colors.green,                  onChanged: (value) {                    setState(() {                      if (value!) {                        _presentStudents                            .add(_listForDisplay[index]['username']);                        _absentStudents.removeWhere((element) =>                        element ==                            _listForDisplay[index]['username']);                      } else {                        _absentStudents                            .add(_listForDisplay[index]['username']);                        _presentStudents.remove(                            _listForDisplay[index]['username']);                        // selecteditems!.remove(items);                      }                    });                  },                );              }),              subtitle: Text(_listForDisplay[index]['username']),              leading: Text((index + 1).toString()),              title: Text(_listForDisplay[index]['firstname'] +                  ' ' +                  _listForDisplay[index]['lastname']),            )),      ],    );  }}