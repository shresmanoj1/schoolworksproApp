import 'dart:convert';import 'dart:developer';import 'package:flutter/material.dart';import 'package:schoolworkspro_app/api/api_response.dart';import 'package:schoolworkspro_app/api/repositories/exam_repo.dart';import 'package:schoolworkspro_app/api/repositories/lecturer/grade_repository.dart';import 'package:schoolworkspro_app/response/lecturer/getgradesheading_response.dart';import 'package:schoolworkspro_app/response/showexam_dropdown.dart';import 'package:schoolworkspro_app/services/lecturer/get_attendanceservice.dart';import 'package:schoolworkspro_app/services/lecturer/getbatch_service.dart';import '../../../../../response/lecturer/view_grades_response.dart';import '../../../../api/repositories/batch_repository.dart';import '../../../../response/attendance_response.dart';import '../../../../response/lecturer/attendance_lecturerresponse.dart';import '../../../../response/lecturer/check_attendance.dart';import '../../../../response/lecturer/getbatch_response.dart';class ModuleAttendanceLecturer extends ChangeNotifier {  ApiResponse _headingAttendanceApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get headingAttendanceApiResponse => _headingAttendanceApiResponse;  List<dynamic> _heading = [];  List<dynamic> get heading => _heading;  Future<void> fetchAttendanceBatches(_moduleSlug) async {    _headingAttendanceApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      GetBatchResponse res =      await BatchService().getAttendanceBatches(_moduleSlug);      if (res.success == true) {        _heading = res.batcharr!;        print("you are in batch $_heading");        _headingAttendanceApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _headingAttendanceApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR222222 :: " + e.toString());      _headingAttendanceApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _checkAttendanceApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get checkAttendanceApiResponse => _checkAttendanceApiResponse;  bool? _checkAttendance;  bool? get checkAttendance => _checkAttendance;  Future<void> fetchCheckAttendance(_moduleSlug, selected) async {    _checkAttendanceApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      CheckAttendanceResponse res =      await GetAttendanceService().checkIfAttendanceDone(_moduleSlug, selected);      print("this is $res");      if (res.success == true) {        _checkAttendance = res.attendanceStatus!;        _checkAttendanceApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _checkAttendanceApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR222222 :: " + e.toString());      _checkAttendanceApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _getAttendacenApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get getAttendacenApiResponse => _getAttendacenApiResponse;  List<dynamic> _getStudentAttendance = [];  List<dynamic> get getStudentAttendance => _getStudentAttendance;  Future<void> fetchStudentAttendance(_moduleSlug, selected) async {    _getAttendacenApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      AttendancelecturerResponse res =      await GetAttendanceService().getAttendance(_moduleSlug, selected);      if (res.success == true) {        print("Response${res.attendance!}");        _getStudentAttendance = res.attendance!;        _getAttendacenApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _getAttendacenApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR222222 :: " + e.toString());      _getAttendacenApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _getAllAttendanceStatusApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get getAllAttendanceStatusApiResponse => _getAllAttendanceStatusApiResponse;  AttendancelecturerResponse _getAllAttendanceStatus = AttendancelecturerResponse();  AttendancelecturerResponse get getAllAttendanceStatus => _getAllAttendanceStatus;  Future<void> fetchStudentAllAttendanceStatus(_moduleSlug, selected) async {    _getAllAttendanceStatusApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      AttendancelecturerResponse res =      await GetAttendanceService().getAttendance(_moduleSlug, selected);      if (res.success == true) {        print("Response${res.attendance!}");        _getAllAttendanceStatus = res;        _getAllAttendanceStatusApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _getAllAttendanceStatusApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR222222 :: " + e.toString());      _getAllAttendanceStatusApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }}