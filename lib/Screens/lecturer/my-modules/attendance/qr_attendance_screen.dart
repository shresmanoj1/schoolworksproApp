import 'dart:async';import 'dart:convert';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:provider/provider.dart';import 'package:qr_flutter/qr_flutter.dart';import 'package:intl/intl.dart';import '../../../../common_view_model.dart';import '../../../../config/api_response_config.dart';import '../../../../response/encrypt_student_qr_response.dart';class QrAttendanceScreen extends StatefulWidget {  final Map<String, dynamic> data;  const QrAttendanceScreen({Key? key, required this.data})      : super(key: key);  @override  State<QrAttendanceScreen> createState() =>      _QrAttendanceScreenState();}class _QrAttendanceScreenState extends State<QrAttendanceScreen> {  late CommonViewModel _provider;  QrData? qrData;  Timer? _timer;  Widget? showMessage;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider = Provider.of<CommonViewModel>(context, listen: false);      fetchData();    });    super.initState();    startTimer();  }  void startTimer() {    _timer = Timer.periodic(Duration(seconds: 20), (Timer t) {      fetchData();    });  }  void cancelTimer() {    _timer?.cancel();  }  @override  void dispose() {    cancelTimer();    super.dispose();  }  void fetchData() async {    DateTime now = DateTime.now();    var formattedtime = DateFormat('hhmmss').format(now);    final dataObj = widget.data;    dataObj["date"] = formattedtime;    final jsonConvert = json.encode(dataObj);    _provider.fetchEncryptStudentQr(jsonConvert).then((_){      if(_provider.encryptStudentQr.qrData != null){        qrData = _provider.encryptStudentQr.qrData;      }else{        showMessage = const Text("No data found");        // qrData = QrData();      }    });  }  @override  Widget build(BuildContext context) {    return Consumer<CommonViewModel>(      builder: (context, common, child) {        return Scaffold(            appBar: AppBar(                elevation: 0.0,                iconTheme: const IconThemeData(                  color: Colors.black,                ),                title: const Text("Qr Attendance",                    style: TextStyle(color: Colors.black)),                backgroundColor: Colors.white),            body: isLoading(common.encryptStudentQrApiResponse) ? const Center(child: CupertinoActivityIndicator()) :            Center(              child: StreamBuilder(                  stream: Stream.periodic(const Duration(minutes: 1)),                  builder: (context, snapshot) {                    return Column(                      children: [                        qrData == null                            ? const Center(                                child: Text("No data found"),                              )                            :                        Builder(builder: (context) {                          DateTime now = DateTime.now();                          // var formattedtime = DateFormat('hhmm').format(now);                          // final dataObj = widget.data;                          // dataObj["timestamp"] = formattedtime;                          // final jsonConvert = json.encode(dataObj);                          return Center(                            child: QrImageView(                              data: jsonEncode(qrData),                              version: QrVersions.auto,                              size: 350.0,                            ),                          );                        }),                      ],                    );                  }),            ));      }    );  }}