import 'dart:io';import 'package:file_picker/file_picker.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:provider/provider.dart';import 'package:url_launcher/url_launcher.dart';import '../../../../../api/repositories/teaching_material_repo.dart';import '../../../../../common_view_model.dart';import '../../../../../components/shimmer.dart';import '../../../../../config/api_response_config.dart';import '../../../../my_learning/teaching_material/teaching_material_view_model.dart';import '../../../../widgets/snack_bar.dart';class AddTeachingMaterialScreen extends StatefulWidget {  final String lessonSlug;  const AddTeachingMaterialScreen(      {Key? key, required this.lessonSlug})      : super(key: key);  @override  State<AddTeachingMaterialScreen> createState() =>      _AddTeachingMaterialScreenState();}class _AddTeachingMaterialScreenState    extends State<AddTeachingMaterialScreen> {  late TeachingMaterialViewModel _provider;  bool isoading = false;  File? file;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider = Provider.of<TeachingMaterialViewModel>(context,          listen: false);      refreshData(_provider);    });    super.initState();  }  Future<void> refreshData(TeachingMaterialViewModel provider) async {    print("LESSONG SLUG:::${widget.lessonSlug}");    provider.fetchTeachingMaterials(widget.lessonSlug);  }  Future<void> _launchInBrowser(Uri url) async {    if (await launchUrl(      url,      mode: LaunchMode.externalApplication,    )) {      throw 'Could not launch $url';    }  }  @override  Widget build(BuildContext context) {    return Consumer2<TeachingMaterialViewModel, CommonViewModel>(        builder: (context, value, common, child) {      return Scaffold(          appBar: AppBar(            title: const Text(              "Teaching Material",              style: TextStyle(color: Colors.black),            ),            backgroundColor: Colors.white,            elevation: 0.0,            iconTheme: const IconThemeData(color: Colors.black),          ),          body: Column(            children: [              Padding(                padding: const EdgeInsets.symmetric(horizontal: 20),                child: Align(                    alignment: Alignment.topRight,                    child: InkWell(                        onTap: () async {                          FilePickerResult? result =                              await FilePicker.platform.pickFiles(                                  type: FileType.custom,                                  allowedExtensions: [                                'doc',                                'pdf',                                'docx',                                'ppt',                                'pptx',                              ]);                          if (result != null) {                            File file =                                File(result.files.single.path!);                            try {                              Map<String, dynamic> datas = {                                "lessonSlug": widget.lessonSlug,                                "medias": file.path,                              };                              final res =                                  await TeachingMaterialRepository()                                      .addTeachingMaterials(datas);                              setState(() {                                isoading = true;                              });                              if (res.success == true) {                                setState(() {                                  isoading = true;                                });                                print(                                    "RESPONSE MESSAGE:::${res.success}");                                snackThis(                                    context: context,                                    color: Colors.green,                                    duration: 2,                                    content:                                        Text(res.message.toString()));                                refreshData(value);                                setState(() {                                  isoading = false;                                });                              } else {                                setState(() {                                  isoading = true;                                });                                snackThis(                                    context: context,                                    color: Colors.red,                                    duration: 2,                                    content:                                        Text(res.message.toString()));                                setState(() {                                  isoading = false;                                });                              }                            } on Exception catch (e) {                              setState(() {                                isoading = true;                              });                              snackThis(                                  context: context,                                  color: Colors.red,                                  duration: 2,                                  content: Text(e.toString()));                              setState(() {                                isoading = false;                              });                            }                          }                          else {                            print("No file selected");                          }                        },                        child: Container(                            padding: const EdgeInsets.symmetric(                                horizontal: 12, vertical: 10),                            decoration: BoxDecoration(                                color: Colors.blueAccent,                                borderRadius:                                    BorderRadius.circular(5)),                            child: const Icon(Icons.upload,                                color: Colors.white, size: 20)))),              ),              RefreshIndicator(                onRefresh: () => refreshData(value),                child: Padding(                  padding: const EdgeInsets.symmetric(                      horizontal: 10, vertical: 10),                  child: isLoading(value.teachingMaterialApiResponse)                      ? const Center(child: CupertinoActivityIndicator())                      : value.materials.files == null                          ? Container()                          : Padding(                              padding: const EdgeInsets.symmetric(                                  horizontal: 10, vertical: 15),                              child: ListView.builder(                                shrinkWrap: true,                                physics:                                    const BouncingScrollPhysics(),                                itemBuilder: (context, int index) {                                  return Card(                                    elevation: 2.0,                                    clipBehavior: Clip.antiAlias,                                    child: Padding(                                      padding:                                          const EdgeInsets.all(10.0),                                      child: Row(                                        children: [                                          Text("${index + 1}. "),                                          Expanded(                                            child: InkWell(                                                onTap: () {                                                  String url =                                                      "https://api.schoolworkspro.com/uploads/files/${value.materials.files![index].filename}";                                                  _launchInBrowser(                                                      Uri.parse(url));                                                },                                                child: Text(                                                  value                                                      .materials                                                      .files![index]                                                      .filename                                                      .toString(),                                                  style: const TextStyle(                                                      color: Colors                                                          .blueAccent,                                                      fontWeight:                                                          FontWeight                                                              .w500),                                                )),                                          ),                                          InkWell(                                              onTap: () async {                                                showDialog(                                                  context: context,                                                  builder: (ctx) =>                                                      AlertDialog(                                                    title: const Text(                                                        "Delete Request?"),                                                    content: const Text(                                                        "Are you sure you want to delete this file?"),                                                    actions: <Widget>[                                                      TextButton(                                                          onPressed:                                                              () async {                                                            try {                                                              final res = await TeachingMaterialRepository().deleteTeachingMaterial(                                                                  value.materials.files![index].filename.toString(),                                                                  widget.lessonSlug);                                                              setState(                                                                  () {                                                                isoading =                                                                    true;                                                              });                                                              if (res.success ==                                                                  true) {                                                                setState(                                                                    () {                                                                  isoading =                                                                      true;                                                                });                                                                snackThis(                                                                    context: context,                                                                    color: Colors.green,                                                                    duration: 2,                                                                    content: Text(res.message.toString()));                                                                Navigator.pop(context);                                                                value.fetchTeachingMaterials(widget.lessonSlug);                                                                setState(                                                                    () {                                                                  isoading =                                                                      false;                                                                });                                                              } else {                                                                setState(                                                                    () {                                                                  isoading =                                                                      true;                                                                });                                                                snackThis(                                                                    context: context,                                                                    color: Colors.red,                                                                    duration: 2,                                                                    content: Text(res.message.toString()));                                                                Navigator.pop(                                                                    context);                                                                setState(                                                                    () {                                                                  isoading =                                                                      false;                                                                });                                                              }                                                            } on Exception catch (e) {                                                              setState(                                                                  () {                                                                isoading =                                                                    true;                                                              });                                                              Navigator.pop(                                                                  context);                                                              snackThis(                                                                  context:                                                                      context,                                                                  color: Colors                                                                      .red,                                                                  duration:                                                                      2,                                                                  content:                                                                      Text(e.toString()));                                                              setState(                                                                  () {                                                                isoading =                                                                    false;                                                              });                                                            }                                                          },                                                          child: Text(                                                              "okay")),                                                      TextButton(                                                          onPressed:                                                              () {                                                            Navigator.of(                                                                    context)                                                                .pop();                                                          },                                                          child: Text(                                                              "Cancel")),                                                    ],                                                  ),                                                );                                              },                                              child: const Icon(                                                Icons.delete,                                                color: Colors.red,                                              )),                                          const SizedBox(                                            height: 10,                                          )                                        ],                                      ),                                    ),                                  );                                },                                itemCount:                                    value.materials.files?.length,                              ),                            ),                ),              ),            ],          ));    });  }}