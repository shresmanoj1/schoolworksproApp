import 'dart:convert';import 'dart:developer';import 'package:date_time_picker/date_time_picker.dart';import 'package:file_picker/file_picker.dart';// import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:get/utils.dart';import 'package:html_editor_enhanced/html_editor.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/lecturer/my-modules/components/more_component/homework_view_model.dart';import 'package:schoolworkspro_app/Screens/prinicpal/fees/feesprincipal_screen.dart';import 'package:schoolworkspro_app/common_view_model.dart';import 'package:intl/intl.dart';import 'package:multi_select_flutter/multi_select_flutter.dart';import 'package:schoolworkspro_app/request/lecturer/homework_request.dart';import '../../../../../api/repositories/lecturer/homework_repository.dart';import '../../../../../response/file_upload_response.dart';import '../../../../widgets/snack_bar.dart';class HomeWorkTaskScreen extends StatefulWidget {  final moduleSlug;  final moduleTitle;  const HomeWorkTaskScreen(      {Key? key, this.moduleSlug, required this.moduleTitle})      : super(key: key);  @override  _HomeWorkTaskScreenState createState() => _HomeWorkTaskScreenState();}class _HomeWorkTaskScreenState extends State<HomeWorkTaskScreen> {  late CommonViewModel _provider;  late HomeworkViewModel _provider2;  List<String> selected_batch = <String>[];  String? type_selection;  HtmlEditorController controller = HtmlEditorController();  final TextEditingController datecontroller = TextEditingController();  final TextEditingController titleController = TextEditingController();  bool visibility = false;  bool isloading = false;  DateTime duedate = DateTime.now();  FocusNode titleFocusNode = FocusNode();  bool isLoadingPost = false;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider = Provider.of<CommonViewModel>(context, listen: false);      _provider.setSlug(widget.moduleSlug);      _provider.fetchBatches();      _provider2 = Provider.of<HomeworkViewModel>(context, listen: false);    });    super.initState();  }  Future uploadFile(PlatformFile file) async {    if (file != null) {      print(file.name);      print(file.size);      print(file.extension);      print(file.path);      FileUploadResponse res = await HomeworkRepository()          .addHomeWorkFile(file.path.toString(), file.name);      try {        setState(() {          isloading = true;        });        if (res.success == true) {          controller.insertLink(file.name, res.link.toString(), true);          setState(() {            isloading = false;          });        } else {          setState(() {            isloading = false;          });        }      } on Exception catch (e) {        setState(() {          isloading = true;        });        print("EXCEPTION:::${e.toString()}");        Navigator.of(context).pop();        setState(() {          isloading = false;        });      }    } else {      // no file pick    }  }  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: AppBar(          title: const Text(            "Add Digital Diary",            style: TextStyle(color: Colors.black),          ),          backgroundColor: Colors.white,          elevation: 0.0,          iconTheme: const IconThemeData(color: Colors.black),        ),        body:        Consumer<CommonViewModel>(builder: (context, common, child) {          return GestureDetector(            onTap: () {              FocusScope.of(context).unfocus();            },            child: ListView(              shrinkWrap: true,              padding: const EdgeInsets.symmetric(horizontal: 10),              children: [                const SizedBox(                  height: 10,                ),                const Padding(                  padding: EdgeInsets.all(8.0),                  child: Text(                    "Task Name",                    style: TextStyle(fontWeight: FontWeight.bold),                  ),                ),                Padding(                  padding: const EdgeInsets.all(8.0),                  child: TextFormField(                    controller: titleController,                    focusNode: titleFocusNode,                    keyboardType: TextInputType.text,                    decoration: const InputDecoration(                      hintText: 'Provide a title for this lesson',                      enabledBorder: OutlineInputBorder(                          borderSide: BorderSide(color: Colors.grey)),                      focusedBorder: OutlineInputBorder(                          borderSide: BorderSide(color: Colors.green)),                      floatingLabelBehavior: FloatingLabelBehavior.always,                    ),                  ),                ),                const Padding(                  padding: EdgeInsets.all(8.0),                  child: Text(                    "Due Date",                    style: TextStyle(fontWeight: FontWeight.bold),                  ),                ),                DateTimePicker(                  type: DateTimePickerType.dateTimeSeparate,                  dateMask: 'd MMM, yyyy',                  initialValue: DateTime.now().toString(),                  firstDate: DateTime(2000),                  lastDate: DateTime(2100),                  icon: const Icon(Icons.event),                  dateLabelText: 'Date',                  timeLabelText: "Hour",                  timePickerEntryModeInput: true,                  onChanged: (val) {                    setState(() {                      duedate = DateTime.parse(val);                    });                  },                  validator: (val) {                    print(val);                    return null;                  },                ),                const Padding(                  padding: EdgeInsets.all(8.0),                  child: Text(                    "Select Batch/Section",                    style: TextStyle(fontWeight: FontWeight.bold),                  ),                ),                Padding(                  padding: const EdgeInsets.all(8.0),                  child: MultiSelectDialogField(                    items: common.batchArr                        .map((e) => MultiSelectItem(e.toString(), e.toString()))                        .toList(),                    listType: MultiSelectListType.CHIP,                    initialValue: selected_batch,                    autovalidateMode: AutovalidateMode.always,                    onConfirm: (List<String> values) {                      setState(() {                        selected_batch = values;                        print(selected_batch);                      });                    },                  ),                ),                const Padding(                  padding: EdgeInsets.all(8.0),                  child: Text(                    "Modules/Subjects",                    style: TextStyle(fontWeight: FontWeight.bold),                  ),                ),                Padding(                  padding: const EdgeInsets.all(8.0),                  child: TextFormField(                    readOnly: true,                    controller: TextEditingController()                      ..text = widget.moduleTitle,                    keyboardType: TextInputType.text,                    decoration: const InputDecoration(                      hintText: "module",                      filled: true,                      enabledBorder: OutlineInputBorder(                          borderSide: BorderSide(color: Colors.grey)),                      focusedBorder: OutlineInputBorder(                          borderSide: BorderSide(color: Colors.green)),                      floatingLabelBehavior: FloatingLabelBehavior.always,                    ),                  ),                ),                const Padding(                  padding: EdgeInsets.all(8.0),                  child: Text(                    "Content",                    style: TextStyle(fontWeight: FontWeight.bold),                  ),                ),                GestureDetector(                  onTap: (){                    titleFocusNode.unfocus();                  },                  child: HtmlEditor(                    controller: controller,                    htmlEditorOptions: const HtmlEditorOptions(                        shouldEnsureVisible: true,                        hint: "Your text here...",                    ),                    htmlToolbarOptions: HtmlToolbarOptions(                      defaultToolbarButtons: [                        const StyleButtons(),                        const FontSettingButtons(),                        const ListButtons(),                        const ParagraphButtons(),                        const InsertButtons(otherFile: true, video: false, audio: false),                        const OtherButtons(                          copy: false,                          paste: false,                        ),                      ],                      onOtherFileUpload: (file) async {                        print(file);                        var response = await uploadFile(file);                        print(response);                        return response;                      },                      toolbarPosition: ToolbarPosition.aboveEditor,                      toolbarType: ToolbarType.nativeExpandable,                      audioExtensions: const ["mp3", "wav"],                      mediaLinkInsertInterceptor: (String url, InsertFileType type) {                        print(url);                        return true;                      },                      mediaUploadInterceptor: (PlatformFile file, InsertFileType type) async {                        return true;                      },                    ),                    otherOptions: OtherOptions(height: 500, decoration: BoxDecoration(border: Border.all(color: Colors.grey), borderRadius: BorderRadius.circular(4.0)),),                  ),                ),                Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: [                    Padding(                      padding: const EdgeInsets.all(8.0),                      child: ElevatedButton(                          style: ElevatedButton.styleFrom(                              primary: Colors.transparent),                          onPressed: () {                            Navigator.of(context).pop();                          },                          child: const Text("Cancel")),                    ),                    common.isLoading == true? const CircularProgressIndicator() :                    ElevatedButton(                        style: ElevatedButton.styleFrom(primary: Colors.green),                        onPressed: common.isLoading == true? null : () async {                          var content = await controller.getText();                          if (duedate != null &&                              titleController.text.isNotEmpty &&                              selected_batch.isNotEmpty &&                              content.isNotEmpty) {                            try {                              common.setLoading(true);                              final request = AddHomeworkRequest(                                  dueDate: duedate,                                  taskname: titleController.text,                                  batch: selected_batch,                                  content: content,                                  moduleSlug: widget.moduleSlug);                              final res =                                  await HomeworkRepository().addHomework(request);                              if (res.success == true) {                                Fluttertoast.showToast(                                    msg: res.message.toString());                                Navigator.of(context).pop();                                common.setLoading(false);                              }                              else {                                Fluttertoast.showToast(                                    msg: res.message.toString());                                common.setLoading(false);                              }                            } on Exception catch (e) {                              common.setLoading(false);                              Fluttertoast.showToast(msg: e.toString());                            }                          } else {                            Fluttertoast.showToast(                                msg: 'You must fill in all of the fields');                          }                        },                        child: const Text("Post")),                  ],                ),                const SizedBox(                  height: 100,                )              ],            ),          );        }),        );  }}