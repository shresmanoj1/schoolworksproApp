import 'dart:async';import 'package:flutter/material.dart';import 'package:schoolworkspro_app/api/api_response.dart';import 'package:schoolworkspro_app/api/repositories/exam_repo.dart';import 'package:schoolworkspro_app/response/additional_books_links_response.dart';import 'package:schoolworkspro_app/response/refrence_links_response.dart';import '../../../api/repositories/additional_resources_repo.dart';import '../../../response/all_exam_response.dart';import '../../../response/exam_detail_response.dart';import '../../../response/exam_my_answer_response.dart';import '../../../response/exam_rules_regulation_response.dart';import '../../../response/exam_score_response.dart';import '../../../response/exam_with_question_response.dart';import '../../../response/flagged_question_response.dart';import '../../../response/getexam_response.dart';import '../../../response/question_answer_response.dart';import '../../../response/server_time_response.dart';import '../../../response/youtube_video_additional_resources_response.dart';class ExamViewModel extends ChangeNotifier {  Duration _myDuration = Duration();  Duration get myDuration => _myDuration;  setDuration(Duration value) {    _myDuration = value;    notifyListeners();  }  ApiResponse _examQuestionAnswerApiResponse =      ApiResponse.initial("Empty Data");  ApiResponse get examQuestionAnswerApiResponse =>      _examQuestionAnswerApiResponse;  QuestionAnswerResponse _questionAnswer = QuestionAnswerResponse();  QuestionAnswerResponse get questionAnswer => _questionAnswer;  Future<void> fetchAExamQuestionAnswer(String id) async {    _examQuestionAnswerApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      QuestionAnswerResponse res =          await ExamRepository().getAExamQuestionAnswer(id);      if (res.success == true) {        _questionAnswer = res;        _examQuestionAnswerApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _examQuestionAnswerApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR ::12 " + e.toString());      _examQuestionAnswerApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _serverTimeApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get serverTimeApiResponse => _serverTimeApiResponse;  dynamic _serverTime;  dynamic get serverTime => _serverTime;  Future<void> fetchServerTime() async {    _serverTimeApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      dynamic res = await ExamRepository().getServerTime();      if (res != null) {        _serverTime = res;        _serverTimeApiResponse = ApiResponse.completed("Success");        notifyListeners();      } else {        _serverTimeApiResponse = ApiResponse.error("Failed");      }    } catch (e) {      print("VM CATCH ERR :: " + e.toString());      _serverTimeApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _myAnswerApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get myAnswerApiResponse => _myAnswerApiResponse;  ExamMyAnswerResponse _myAnswer = ExamMyAnswerResponse();  ExamMyAnswerResponse get myAnswer => _myAnswer;  Future<void> fetchMyAnswer(String id) async {    _myAnswerApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      ExamMyAnswerResponse res = await ExamRepository().getMyAnswer(id);      if (res.success == true) {        _myAnswer = res;        _myAnswerApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _myAnswerApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR ::3 " + e.toString());      _myAnswerApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _flaggedQuestionApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get flaggedQuestionApiResponse => _flaggedQuestionApiResponse;  FlaggedQuestionResponse _flaggedQuestion = FlaggedQuestionResponse();  FlaggedQuestionResponse get flaggedQuestion => _flaggedQuestion;  Future<void> fetchFlaggedQuestion(String examId) async {    _flaggedQuestionApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      dynamic res = await ExamRepository().getFlagQuestion(examId);      if (res != null) {        _flaggedQuestion = res;        _flaggedQuestionApiResponse = ApiResponse.completed("Success");        notifyListeners();      } else {        _flaggedQuestionApiResponse = ApiResponse.error("Failed");      }    } catch (e) {      print("VM CATCH ERR ::4 " + e.toString());      _flaggedQuestionApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _myExamsApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get myExamsApiResponse => _myExamsApiResponse;  GetExamResponse _myExams = GetExamResponse();  GetExamResponse get myExams => _myExams;  Future<void> fetchMyExam() async {    _myExamsApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      GetExamResponse res = await ExamRepository().getMyExams();      if (res.success == true) {        _myExams = res;        _myExamsApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _myExamsApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR ::5 $e");      _myExamsApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _allExamsApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get allExamsApiResponse => _allExamsApiResponse;  List<AllExam> _allExams = [];  List<AllExam> get allExams => _allExams;  Future<void> fetchAllExam() async {    _allExamsApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      AllExamResponse res = await ExamRepository().getAllExams();      if (res.success == true) {        _allExams = res.allExams!;        _allExamsApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _allExamsApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR ::5 $e");      _allExamsApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _examDetailsApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get examDetailsApiResponse => _examDetailsApiResponse;  ExamDetailResponse _examDetails = ExamDetailResponse();  ExamDetailResponse get examDetails => _examDetails;  Future<void> fetchExamDetails(String id) async {    _examDetailsApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      ExamDetailResponse res = await ExamRepository().getExamDetails(id);      if (res.success == true) {        _examDetails = res;        _examDetailsApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _examDetailsApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR ::13 " + e.toString());      _examDetailsApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _examWithQuestionApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get examWithQuestionApiResponse => _examWithQuestionApiResponse;  ExamWithQuestionResponse _examWithQuestion = ExamWithQuestionResponse();  ExamWithQuestionResponse get examWithQuestion => _examWithQuestion;  Future<void> fetchExamWithQuestion(String id) async {    _examWithQuestionApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      ExamWithQuestionResponse res =          await ExamRepository().getExamWithQuestion(id);      if (res.success == true) {        _examWithQuestion = res;        _examWithQuestionApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _examWithQuestionApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR ::1 " + e.toString());      _examWithQuestionApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _examScoreApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get examScoreApiResponse => _examScoreApiResponse;  List<Answers> _examScoreAnswer = <Answers>[];  List<Answers> get examScoreAnswer => _examScoreAnswer;  String _examScore = "";  String get examScore => _examScore;  Future<void> fetchExamScoreAnswer(String examId) async {    _examScoreApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      ExamScoreResponse res = await ExamRepository().getExamScore(examId);      if (res.success == true) {        _examScoreAnswer = res.answers!;        try{          _examScore = res.examScore!.score.toString();        }catch(e){          _examScore = "0";        }        _examScoreApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _examScoreApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR :: $e");      _examScoreApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }}