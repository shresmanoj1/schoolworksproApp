import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/student/careers/career_view_model.dart';import 'package:schoolworkspro_app/components/shimmer.dart';import 'package:schoolworkspro_app/config/api_response_config.dart';import 'package:url_launcher/url_launcher.dart';import '../../../api/api.dart';import '../../../constants/colors.dart';class JobFinderScreen extends StatefulWidget {  const JobFinderScreen({Key? key}) : super(key: key);  @override  State<JobFinderScreen> createState() => _JobFinderScreenState();}class _JobFinderScreenState extends State<JobFinderScreen> {  late CareerViewModel _provider;  List<String> searchValue = [];  @override  Widget build(BuildContext context) {    return Consumer<CareerViewModel>(      builder: (context, career, child) {        return SafeArea(          child:          ListView(            shrinkWrap: true,            physics: ScrollPhysics(),            children: [              Padding(                padding: const EdgeInsets.symmetric(horizontal: 11, vertical: 10),                child: Container(                  height: 45,                  decoration: BoxDecoration(                    color: Colors.grey[100],                    borderRadius: BorderRadius.circular(4),                  ),                  child: InkWell(                    // onTap: () => Navigator.of(context).pushNamed(SearchScreen.routeName),                    child: TextField(                      textAlignVertical: TextAlignVertical.center,                      decoration:const InputDecoration(                        fillColor: white,                        contentPadding:                        EdgeInsets.symmetric(vertical: 5),                        alignLabelWithHint: true,                        // border: InputBorder.none,                        enabledBorder: OutlineInputBorder(                            borderSide: BorderSide(color: grey_400, )),                        focusedBorder: OutlineInputBorder(                            borderSide: BorderSide(color: grey_400)),                        border: OutlineInputBorder(                            borderSide: BorderSide(color: grey_400)),                        hintText: "Search For Job",                        hintStyle: TextStyle(color: Colors.grey),                        prefixIcon: Icon(                          Icons.search,                          color: Colors.grey,                        ),                      ),                      onSubmitted:(value){                        searchValue.clear();                        searchValue.add(value);                        career.fetchJobFinder(searchValue);                      },                    ),                  ),                ),              ),              isLoading(career.jobFinderApiResponse) ? const VerticalLoader() :              career.jobFinder.data == null || career.jobFinder.data!.isEmpty ? Column(                children: [                  Image.asset("assets/images/no_job_opening.png"),                ],              ) :              ListView.builder(                  shrinkWrap: true,                physics: ScrollPhysics(),                itemCount: career.jobFinder.data!.length,                  itemBuilder: (context, index){                return career.jobFinder.data![index].jobs!.isEmpty ? Container() :                Card(                  elevation: 1,                  child: Container(                    padding:                    const EdgeInsets.symmetric(horizontal: 5, vertical: 10),                    child: Column(                      children: [                        Row(                          mainAxisAlignment: MainAxisAlignment.start,                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [                            Container(                                decoration: BoxDecoration(                                  border: Border.all(                                      color: Colors.grey),                                  borderRadius:                                  BorderRadius                                      .circular(6),                                ),                                child: ClipRRect(                                    borderRadius:                                    BorderRadius                                        .circular(10),                                    child: CachedNetworkImage(                                        fit: BoxFit                                            .contain,                                        imageUrl: career.jobFinder.data![index].providerImage.toString(),                                        height: 70,                                        width: 70,                                        placeholder: (context,                                            url) =>                                            const Center(                                                child:                                                CircularProgressIndicator()),                                        errorWidget: (context,                                            url,                                            error) =>                                            Icon(Icons.error)))),                            const SizedBox(                              width: 10,                            ),                            Expanded(child: Column(                              mainAxisAlignment: MainAxisAlignment.center,                              crossAxisAlignment: CrossAxisAlignment.start,                              children: [                                 Text(                                  career.jobFinder.data![index].providerName.toString(),                                  style: const TextStyle(                                      fontSize: 20,                                      fontWeight: FontWeight.bold),                                ),                                 TextButton(                                   onPressed: () { _launchURL(career.jobFinder.data![index].provider.toString()); },                                   style: TextButton.styleFrom(                                       padding: EdgeInsets.zero,                                       minimumSize: const Size(50, 20),                                       tapTargetSize: MaterialTapTargetSize.shrinkWrap,                                       alignment: Alignment.centerLeft),                                   child: Text(                                    career.jobFinder.data![index].provider.toString(),                                    style: const TextStyle(                                        fontSize: 14,                                        fontWeight: FontWeight.bold),                                ),                                 ),                                const SizedBox(height: 10,),                                Align(                                  alignment: Alignment.bottomRight,                                    child: InkWell(                                  onTap:(){                                    _launchURL(career.jobFinder.data![index].seeMore.toString());                                  },                                    child: Container(                                    padding: const EdgeInsets.symmetric(                                        horizontal: 10, vertical: 5),                                    decoration: BoxDecoration(                                      color: Colors.grey[100],),                                    child: const Text("See More", style: TextStyle(fontWeight: FontWeight.bold),)))),                                const SizedBox(height: 5,),                              ],                            )),                          ],                        ),                        career.jobFinder.data![index].jobs!.isEmpty ? Container() :                        ListView.builder(                          padding: EdgeInsets.zero,                          physics: NeverScrollableScrollPhysics(),                          shrinkWrap: true,                          itemCount: career.jobFinder.data![index].jobs!.length,                            itemBuilder: (context, index2){                            var data = career.jobFinder.data![index].jobs![index2];                          return Padding(                            padding: const EdgeInsets.symmetric(                                horizontal: 20, vertical: 0),                            child: Column(                              children: [                                const Divider(),                                InkWell(                                  onTap: (){                                    _launchURL(data.url.toString());                                  },                                  child: Row(                                    mainAxisAlignment: MainAxisAlignment.start,                                    crossAxisAlignment:                                    CrossAxisAlignment.start,                                    children: [                                      Container(                                          decoration: BoxDecoration(                                            border: Border.all(                                                color: Colors.grey),                                            borderRadius:                                            BorderRadius                                                .circular(6),                                          ),                                          child: ClipRRect(                                              borderRadius:                                              BorderRadius                                                  .circular(10),                                              child: CachedNetworkImage(                                                  fit: BoxFit                                                      .contain,                                                  imageUrl: data.image.toString(),                                                  height: 45,                                                  width: 45,                                                  placeholder: (context,                                                      url) =>                                                  const Center(                                                      child:                                                      CircularProgressIndicator()),                                                  errorWidget: (context,                                                      url,                                                      error) =>                                                      Icon(Icons.error)))),                                      const SizedBox(                                        width: 10,                                      ),                                      Expanded(                                          child: Column(                                        mainAxisAlignment:                                        MainAxisAlignment.start,                                        crossAxisAlignment:                                        CrossAxisAlignment.start,                                        children: [                                          Text(                                            data.title.toString(),                                            style: const TextStyle(                                                fontSize: 14,                                                fontWeight: FontWeight.bold),                                          ),                                          const SizedBox(                                            height: 5,                                          ),                                          Row(                                            crossAxisAlignment: CrossAxisAlignment.start,                                            children: [                                              const Icon(Icons.shopping_bag, color: Colors.black45, size: 22),                                              Expanded(child: Text(                                                data.company == null ? "N/A" : data.company.toString(),                                                style: const TextStyle(                                                    fontSize: 14,                                                    fontWeight:                                                    FontWeight.bold),                                              ),                                              )                                            ],                                          ),                                          const SizedBox(                                            height: 5,                                          ),                                          Row(                                            crossAxisAlignment: CrossAxisAlignment.start,                                            children: [                                              const Icon(Icons.place, color: Colors.black45, size: 22,),                                              Expanded(child: Text(                                                data.address == null ? "N/A" : data.address.toString(),                                                style: const TextStyle(                                                  fontSize: 14,                                                ),                                              )),                                            ],                                          ),                                        ],                                      ))                                    ],                                  ),                                ),                              ],                            ),                          );                        })                      ],                    ),                  ),                );              })            ],          ),        );      }    );  }  _launchURL(String abc) async {    String url = abc;    if (await canLaunch(url)) {      await launch(url);    } else {      throw 'Could not launch $url';    }}}