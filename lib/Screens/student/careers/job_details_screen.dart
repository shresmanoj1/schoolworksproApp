import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:flutter_html/flutter_html.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/student/careers/career_view_model.dart';import 'package:html/dom.dart' as dom;import 'package:schoolworkspro_app/api/repositories/career_repo.dart';import 'package:schoolworkspro_app/constants/colors.dart';import 'package:url_launcher/url_launcher.dart';import '../../../api/api.dart';import '../../../components/shimmer.dart';import '../../../config/api_response_config.dart';import 'package:intl/intl.dart';import '../../../helper/custom_loader.dart';import '../../widgets/snack_bar.dart';class JobDetailScreen extends StatefulWidget {  final String args;  const JobDetailScreen({Key? key, required this.args})      : super(key: key);  @override  State<JobDetailScreen> createState() => _JobDetailScreenState();}class _JobDetailScreenState extends State<JobDetailScreen> {  late CareerViewModel _provider;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      _provider =          Provider.of<CareerViewModel>(context, listen: false);      _provider.fetchJobDetail(widget.args);    });    super.initState();  }  bool _isLoading = false;  @override  Widget build(BuildContext context) {    if (_isLoading == true ) {      customLoadStart();    } else {      customLoadStop();    }    return Consumer<CareerViewModel>(        builder: (context, career, child) {      return Scaffold(          appBar: AppBar(              elevation: 0.0,              centerTitle: false,              title: Text(                career.jobDetails.job != null ? career.jobDetails.job!.jobTitle.toString() : 'Job Details',                style: const TextStyle(color: white, fontWeight: FontWeight.w800),              ),              actions: [                isLoading(career.jobDetailApiResponse)                    ? Container() :                career.jobDetails.job == null                    ? Container()                    : InkWell(                  onTap: ()                  async {                    setState(() {                      _isLoading = true;                    });                    try {                      final res = await CareerRepository()                          .jobBookMark(career.jobDetails.job!.id.toString(), !career.jobDetails.job!.saved!);                      if (res.success == true) {                        setState(() {                          _isLoading = true;                        });                        _provider.fetchJobDetail(widget.args);                        snackThis(                            duration: 1,                            context: context,                            color: Colors.green,                            content: Text(                                res.message.toString()));                        setState(() {                          _isLoading = false;                        });                      } else {                        setState(() {                          _isLoading = true;                        });                        snackThis(                            duration: 1,                            context: context,                            color: Colors.red,                            content: Text(                                res.message.toString()));                        setState(() {                          _isLoading = false;                        });                      }                    } on Exception catch (e) {                      setState(() {                        _isLoading = true;                      });                      snackThis(                          context: context,                          color: Colors.red,                          content: Text(e.toString()));                      setState(() {                        _isLoading = false;                      });                    }                  }                  ,                      child: Row(                  children: [                      // Text(                      //     career.jobDetails.job!.saved ==                      //         true                      //         ? "Unsave Job"                      //         : "Save Job",                      //     style: const TextStyle(                      //       color: Colors.black,                      //     )),                      career.jobDetails.job!.saved == true                          ? const Icon(                        Icons.bookmark,                        color: white,                      )                          : const Icon(                        Icons.bookmark_border,                        color: white,                      ),                      SizedBox(width: 10,)                  ],                ),                    )              ],              backgroundColor: logoTheme),          body: isLoading(career.jobDetailApiResponse)              ? const VerticalLoader()              : career.jobDetails.job == null                  ? Container()                  : SingleChildScrollView(                      child: Column(                        crossAxisAlignment: CrossAxisAlignment.start,                        children: [                          Padding(                            padding: const EdgeInsets.symmetric(                                horizontal: 5),                            child: Card(                              elevation: 16,                              child: Container(                                padding: EdgeInsets.symmetric(                                    horizontal: 15, vertical: 20),                                child: Column(                                  crossAxisAlignment:                                      CrossAxisAlignment.start,                                  children: [                                    Row(                                      mainAxisAlignment:                                          MainAxisAlignment.start,                                      crossAxisAlignment:                                          CrossAxisAlignment.center,                                      children: [                                        Container(                                            decoration: BoxDecoration(                                              border: Border.all(                                                  color: Colors.grey),                                              borderRadius:                                                  BorderRadius                                                      .circular(6),                                            ),                                            child: ClipRRect(                                                borderRadius:                                                    BorderRadius                                                        .circular(10),                                                child: CachedNetworkImage(                                                    fit: BoxFit                                                        .contain,                                                    imageUrl: "$api_url2/uploads/institutions/" +                                                        career                                                            .jobDetails                                                            .job!                                                            .organization!                                                            .footerLogo                                                            .toString(),                                                    height: 92,                                                    width: 98,                                                    placeholder: (context,                                                            url) =>                                                        Center(                                                            child:                                                                CircularProgressIndicator()),                                                    errorWidget: (context,                                                            url,                                                            error) =>                                                        Icon(Icons.error)))),                                        const SizedBox(                                          width: 10,                                        ),                                        Column(                                          mainAxisAlignment:                                              MainAxisAlignment                                                  .center,                                          crossAxisAlignment:                                              CrossAxisAlignment                                                  .start,                                          children: [                                            Text(                                              career.jobDetails.job!                                                  .jobTitle                                                  .toString(),                                              style: const TextStyle(                                                  fontSize: 20,                                                  fontWeight:                                                      FontWeight                                                          .bold),                                            ),                                            Text(                                              career.jobDetails.job!                                                  .organization!.name                                                  .toString(),                                              style: const TextStyle(                                                  fontSize: 14,                                                  fontWeight:                                                      FontWeight                                                          .bold),                                            ),                                            Text(                                              career.jobDetails.job!                                                  .location                                                  .toString(),                                              style: TextStyle(                                                fontSize: 14,                                              ),                                            ),                                          ],                                        )                                      ],                                    ),                                    SizedBox(                                      height: 20,                                    ),                                    Row(                                      children: [                                        _buildJobType(career                                            .jobDetails                                            .job!                                            .employmentType                                            .toString()),                                        _buildJobType(career                                            .jobDetails.job!.jobLevel                                            .toString())                                      ],                                    ),                                    const Text(                                      "Required Skills:",                                      style: TextStyle(                                          fontSize: 14,                                          fontWeight:                                              FontWeight.bold),                                    ),                                    Padding(                                      padding:                                          const EdgeInsets.symmetric(                                              vertical: 10),                                      child: Container(                                        height: 30,                                        child: ListView.builder(                                            scrollDirection:                                                Axis.horizontal,                                            shrinkWrap: true,                                            itemCount: career                                                .jobDetails                                                .job!                                                .skills!                                                .length,                                            itemBuilder:                                                (context, index) {                                              return Padding(                                                padding:                                                    const EdgeInsets                                                            .only(                                                        right: 5),                                                child: Container(                                                  padding:                                                      const EdgeInsets                                                              .symmetric(                                                          horizontal:                                                              10,                                                          vertical:                                                              5),                                                  decoration: BoxDecoration(                                                      borderRadius:                                                          BorderRadius                                                              .circular(                                                                  15),                                                      color: const Color(                                                          0xff647b9c)),                                                  child: Text(                                                    career                                                            .jobDetails                                                            .job!                                                            .skills![                                                        index],                                                    style: TextStyle(                                                        color: Colors                                                            .white),                                                  ),                                                ),                                              );                                            }),                                      ),                                    ),                                    const SizedBox(                                      height: 5,                                    ),                                    // career.jobDetails.job == null                                    //     ? Container()                                    //     : Row(                                    //   children: [                                    //     ElevatedButton(                                    //         style: ButtonStyle(                                    //           side: MaterialStateProperty.all(                                    //             BorderSide(color: Colors.black),                                    //           ),                                    //           elevation:                                    //           MaterialStateProperty.all(0),                                    //           backgroundColor:                                    //           MaterialStateProperty.all(                                    //               Colors.white),                                    //           minimumSize:                                    //           MaterialStateProperty.all<Size>(                                    //               const Size(30, 42)),                                    //         ),                                    //         onPressed: () async {                                    //           setState(() {                                    //             _isLoading = true;                                    //           });                                    //           try {                                    //             final res = await CareerRepository()                                    //                 .jobBookMark(career.jobDetails.job!.id.toString(), !career.jobDetails.job!.saved!);                                    //                                    //             if (res.success == true) {                                    //               setState(() {                                    //                 _isLoading = true;                                    //               });                                    //               _provider.fetchJobDetail(widget.args);                                    //               snackThis(                                    //                   duration: 1,                                    //                   context: context,                                    //                   color: Colors.green,                                    //                   content: Text(                                    //                       res.message.toString()));                                    //               setState(() {                                    //                 _isLoading = false;                                    //               });                                    //             } else {                                    //               setState(() {                                    //                 _isLoading = true;                                    //               });                                    //               snackThis(                                    //                   duration: 1,                                    //                   context: context,                                    //                   color: Colors.red,                                    //                   content: Text(                                    //                       res.message.toString()));                                    //               setState(() {                                    //                 _isLoading = false;                                    //               });                                    //             }                                    //           } on Exception catch (e) {                                    //             setState(() {                                    //               _isLoading = true;                                    //             });                                    //             snackThis(                                    //                 context: context,                                    //                 color: Colors.red,                                    //                 content: Text(e.toString()));                                    //                                    //             setState(() {                                    //               _isLoading = false;                                    //             });                                    //           }                                    //         },                                    //         child: Row(                                    //           children: [                                    //             Text(                                    //                 career.jobDetails.job!.saved ==                                    //                     true                                    //                     ? "Unsave Job"                                    //                     : "Save Job",                                    //                 style: const TextStyle(                                    //                   color: Colors.black,                                    //                 )),                                    //             career.jobDetails.job!.saved == true                                    //                 ? const Icon(                                    //               Icons.bookmark,                                    //               color: Colors.black,                                    //             )                                    //                 : const Icon(                                    //               Icons.bookmark_border,                                    //               color: Colors.black,                                    //             ),                                    //           ],                                    //         )),                                    //     SizedBox(                                    //       width: 10,                                    //     )                                    //   ],                                    // ),                                    const SizedBox(                                      height: 5,                                    ),                                    Container(                                      decoration: BoxDecoration(                                          border: Border.all(                                              color:                                                  Color(0xffD9D9D9)),                                          borderRadius:                                              BorderRadius.circular(                                                  5)),                                      padding: EdgeInsets.symmetric(                                          vertical: 10,                                          horizontal: 5),                                      child: Column(                                        crossAxisAlignment:                                            CrossAxisAlignment.start,                                        children: [                                          Row(                                            children: const [                                              Icon(                                                Icons.shopping_bag,                                                size: 30,                                              ),                                              SizedBox(                                                width: 5,                                              ),                                              Expanded(                                                  child: Text(                                                "Job Basic Information",                                                style: TextStyle(                                                    fontSize: 14,                                                    fontWeight:                                                        FontWeight                                                            .bold),                                              ))                                            ],                                          ),                                          Divider(),                                          Column(                                            crossAxisAlignment:                                                CrossAxisAlignment                                                    .start,                                            children: [                                              _buildJobBasicInformation(                                                  "Job Level",                                                  career.jobDetails                                                      .job!.jobLevel                                                      .toString(),                                                  70),                                              SizedBox(                                                height: 10,                                              ),                                              _buildJobBasicInformation(                                                  "Employment Type",                                                  career                                                      .jobDetails                                                      .job!                                                      .employmentType                                                      .toString(),                                                  20),                                              SizedBox(                                                height: 10,                                              ),                                              _buildJobBasicInformation(                                                  "Education Level",                                                  career.jobDetails                                                      .job!.education                                                      .toString(),                                                  33),                                              SizedBox(                                                height: 10,                                              ),                                              _buildJobBasicInformation(                                                  "Number of Openings",                                                  career.jobDetails                                                      .job!.openings                                                      .toString(),                                                  3),                                              SizedBox(                                                height: 10,                                              ),                                              _buildJobBasicInformation(                                                  "Experience",                                                  career                                                      .jobDetails                                                      .job!                                                      .experience!                                                      .label                                                      .toString(),                                                  60),                                              SizedBox(                                                height: 10,                                              ),                                              _buildJobBasicInformation(                                                  "Salary",                                                  career                                                      .jobDetails                                                      .job!                                                      .salary!                                                      .value                                                      .toString(),                                                  89),                                              SizedBox(                                                height: 10,                                              ),                                              _buildJobBasicInformation(                                                  "Apply Before",                                                  DateFormat.yMMMEd()                                                      .format(career                                                          .jobDetails                                                          .job!                                                          .deadline!),                                                  50),                                            ],                                          ),                                        ],                                      ),                                    ),                                    const SizedBox(                                      height: 10,                                    ),                                    Container(                                      decoration: BoxDecoration(                                          border: Border.all(                                              color: const Color(                                                  0xffD9D9D9)),                                          borderRadius:                                              BorderRadius.circular(                                                  5)),                                      padding:                                          const EdgeInsets.symmetric(                                              vertical: 10,                                              horizontal: 5),                                      child: Html(                                        data: career.jobDetails.job!                                            .description,                                        customRender: {                                          "table": (context, child) {                                            return SingleChildScrollView(                                              scrollDirection: Axis.horizontal,                                              child: (context.tree as TableLayoutElement).toWidget(context),                                            );                                          }                                        },                                        onLinkTap: (String? url,                                            RenderContext context,                                            Map<String, String>                                                attributes,                                            dom.Element? element) {                                          Future<void>                                              _launchInBrowser(                                                  Uri url) async {                                            if (await launchUrl(                                              url,                                              mode: LaunchMode                                                  .externalApplication,                                            )) {                                              throw 'Could not launch $url';                                            }                                          }                                          var linkUrl = url!                                              .replaceAll(" ", "%20");                                          _launchInBrowser(                                              Uri.parse(linkUrl));                                        },                                        onImageTap: (String? url,                                            RenderContext context,                                            Map<String, String>                                                attributes,                                            dom.Element? element) {                                          launch(url!);                                        },                                      ),                                    ),                                  ],                                ),                              ),                            ),                          ),                          SizedBox(                            height: 70,                          )                        ],                      ),                    ));    });  }  Widget _buildJobType(String title) {    return Padding(      padding: const EdgeInsets.only(right: 5, bottom: 10),      child: Container(        decoration: const BoxDecoration(          color: Colors.red,          borderRadius: BorderRadius.all(            Radius.circular(6),          ),        ),        child: Padding(          padding: EdgeInsets.symmetric(            horizontal: 6,            vertical: 2,          ),          child: Text(            title.toString(),            style: TextStyle(                fontWeight: FontWeight.bold,                fontSize: 14,                color: Colors.white),          ),        ),      ),    );  }  List<String> getJobsRequirements() {    return <String>[      "Exceptional communication skills and team-working skills",      "Know the principles of animation and you can create high fidelity prototypes",      "Direct experience using Adobe Premiere, Adobe After Effects & other tools used to create videos, animations, etc.",      "Good UI/UX knowledge",    ];  }  Widget _buildJobBasicInformation(      String title, String answer, double width) {    return Padding(      padding: const EdgeInsets.all(4.0),      child: RichText(        text: TextSpan(            text: title,            style: TextStyle(                fontSize: 12,                fontWeight: FontWeight.bold,                color: Colors.black),            children: [              WidgetSpan(                  alignment: PlaceholderAlignment.baseline,                  baseline: TextBaseline.alphabetic,                  child: SizedBox(width: width)),              const TextSpan(                text: ":",                style: TextStyle(                    fontWeight: FontWeight.normal,                    color: Colors.black),              ),              WidgetSpan(                  alignment: PlaceholderAlignment.baseline,                  baseline: TextBaseline.alphabetic,                  child: const SizedBox(width: 10)),              TextSpan(                text: answer,                style: TextStyle(                    fontWeight: FontWeight.normal,                    color: Colors.black),              ),            ]),      ),    );  }}