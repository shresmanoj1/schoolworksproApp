import 'dart:convert';import 'package:flutter/material.dart';import 'package:schoolworkspro_app/response/job_finder_response.dart';import 'package:schoolworkspro_app/response/job_setting_respone.dart';import 'package:schoolworkspro_app/response/my_resume_response.dart';import '../../../api/api_response.dart';import '../../../api/repositories/career_repo.dart';import '../../../response/all_job_response.dart';import '../../../response/google_jobs_response.dart';import '../../../response/job_detail_response.dart';import '../../../response/my_application_response.dart';class CareerViewModel extends ChangeNotifier {  ApiResponse _allJobApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get allJobApiResponse => _allJobApiResponse;  AllJobResponse _allJobs = AllJobResponse();  AllJobResponse get allJobs => _allJobs;  Future<void> fetchAllJob(String page, dynamic filter) async {    _allJobApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      print("HELLO:::");      final filterData = jsonEncode({"filters" : filter});      print("FILTER:::$filterData");      AllJobResponse res = await CareerRepository().getAllJob(page, filterData);      if (res.success == true) {        _allJobs = res;        _allJobApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _allJobApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _allJobApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _jobDetailApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get jobDetailApiResponse => _jobDetailApiResponse;  JobDetailResponse _jobDetails = JobDetailResponse();  JobDetailResponse get jobDetails => _jobDetails;  Future<void> fetchJobDetail(String slug) async {    _jobDetailApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      JobDetailResponse res = await CareerRepository().getJobDetails(slug);      if (res.success == true) {        _jobDetails = res;        _jobDetailApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _jobDetailApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _jobDetailApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _myApplicationApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get myApplicationApiResponse => _myApplicationApiResponse;  MyApplicationResponse _myApplication = MyApplicationResponse();  MyApplicationResponse get myApplication => _myApplication;  Future<void> fetchMyApplication() async {    _myApplicationApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      MyApplicationResponse res = await CareerRepository().getMyApplication();      if (res.success == true) {        _myApplication = res;        print(_myApplication.toJson());        _myApplicationApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _myApplicationApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _myApplicationApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _myResumeApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get myResumeApiResponse => _myResumeApiResponse;  MyResumeResponse _myResume = MyResumeResponse();  MyResumeResponse get myResume => _myResume;  Future<void> fetchMyResume() async {    _myResumeApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      MyResumeResponse res = await CareerRepository().getMyResume();      if (res.success == true) {        _myResume = res;        _myResumeApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _myResumeApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _myResumeApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _googleJobsApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get googleJobsApiResponse => _googleJobsApiResponse;  GoogleJobsResponse _googleJobs = GoogleJobsResponse();  GoogleJobsResponse get googleJobs => _googleJobs;  Future<void> fetchGoogleJob(List<String> tags) async {    _googleJobsApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      GoogleJobsResponse res = await CareerRepository().getGoogleJobs(tags);      if (res.success == true) {        _googleJobs = res;        _googleJobsApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _googleJobsApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _googleJobsApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _jobFinderApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get jobFinderApiResponse => _jobFinderApiResponse;  JobFinderResponse _jobFinder = JobFinderResponse();  JobFinderResponse get jobFinder => _jobFinder;  Future<void> fetchJobFinder(List<String> tags) async {    _jobFinderApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      JobFinderResponse res = await CareerRepository().getJob(tags);      if (res.success == true) {        _jobFinder = res;        _jobFinderApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _jobFinderApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _jobFinderApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _jobSettingApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get jobSettingApiResponse => _jobSettingApiResponse;  JobSettingResponse _jobSetting = JobSettingResponse();  JobSettingResponse get jobSetting => _jobSetting;  Future<void> fetchJobSetting() async {    _jobSettingApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      JobSettingResponse res = await CareerRepository().getJobSetting();      if (res.success == true) {        _jobSetting = res;        _jobSettingApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _jobSettingApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _jobSettingApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }}