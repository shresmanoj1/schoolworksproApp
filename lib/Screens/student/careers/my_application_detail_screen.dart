import 'dart:convert';import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:schoolworkspro_app/api/repositories/career_repo.dart';import 'package:url_launcher/url_launcher.dart';import '../../../api/api.dart';import '../../../constants/colors.dart';import '../../../response/my_application_response.dart';import '../../widgets/snack_bar.dart';class MyApplicationDetailScreen extends StatefulWidget {  final Request request;  MyApplicationDetailScreen({Key? key, required this.request})      : super(key: key);  @override  State<MyApplicationDetailScreen> createState() =>      _MyApplicationDetailScreenState();}class _MyApplicationDetailScreenState extends State<MyApplicationDetailScreen> {  TextEditingController replyController = TextEditingController();  bool _keyboardVisible = false;  bool isLoading = false;  @override  Widget build(BuildContext context) {    _keyboardVisible = MediaQuery.of(context).viewInsets.bottom != 0;    return Scaffold(      body: Scaffold(        appBar: AppBar(          elevation: 0.0,          title: Text(            widget.request.applicationId.toString(),            style: const TextStyle(color: Colors.black),          ),          backgroundColor: Colors.white,          iconTheme: const IconThemeData(color: Colors.black),        ),        body: ListView(          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),          shrinkWrap: true,          children: [            Container(                padding:                    const EdgeInsets.symmetric(horizontal: 10, vertical: 10),                decoration: BoxDecoration(                    border: Border.all(color: Colors.grey),                    borderRadius: BorderRadius.circular(4)),                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    _buildInfo("Info", Icons.info),                    Text(                      widget.request.topic.toString(),                      style: const TextStyle(                          fontWeight: FontWeight.w500, fontSize: 16),                    ),                    // const SizedBox(                    //   height: 20,                    // ),                    const Divider(                      color: black,                      height: 40,                      thickness: 1,                    ),                    _buildInfo("Interviews", Icons.calendar_month),                    widget.request.interview == null ||                            widget.request.interview!.isEmpty                        ? SizedBox(                            height: 10,                          )                        : ListView.builder(                            physics: const NeverScrollableScrollPhysics(),                            padding: const EdgeInsets.symmetric(                                horizontal: 0, vertical: 10),                            itemCount: widget.request.interview!.length,                            shrinkWrap: true,                            itemBuilder: (context, index) {                              return Card(                                child: Container(                                  padding: const EdgeInsets.symmetric(                                      horizontal: 10, vertical: 10),                                  child: Column(                                    crossAxisAlignment:                                        CrossAxisAlignment.start,                                    children: [                                      Text(                                        widget.request                                            .interview![index]["identifier"]                                            .toString(),                                        style: const TextStyle(                                          fontSize: 16,                                        ),                                      ),                                      const SizedBox(                                        height: 5,                                      ),                                      _buildInfo(                                          DateFormat.yMMMEd().format(                                              DateTime.parse(widget                                                      .request.interview![index]                                                  ["interviewDate"])),                                          Icons.timer),                                      const SizedBox(                                        height: 5,                                      ),                                      _buildInfo(                                          widget.request.interview![index]                                              ["interviewType"],                                          Icons.online_prediction),                                      const SizedBox(                                        height: 5,                                      ),                                      widget.request.interview![index]                                                  ["interviewType"] ==                                              "Physical"                                          ? Container()                                          : Padding(                                              padding: const EdgeInsets.only(                                                  bottom: 5),                                              child: Row(                                                crossAxisAlignment:                                                    CrossAxisAlignment.start,                                                children: [                                                  const Icon(                                                    Icons.link,                                                    size: 26,                                                  ),                                                  const SizedBox(                                                    width: 10,                                                  ),                                                  Expanded(                                                      child: InkWell(                                                    onTap: () {                                                      _launchURL(widget                                                          .request                                                          .interview![index]                                                              ["interviewLink"]                                                          .toString());                                                    },                                                    child: const Text(                                                      "Interview Link",                                                      style: TextStyle(                                                          fontSize: 15,                                                          color: Colors                                                              .blueAccent),                                                    ),                                                  ))                                                ],                                              ),                                            ),                                      const SizedBox(                                        height: 5,                                      ),                                      Text(                                        widget.request.interview![index]["info"]                                            .toString()                                            .toString(),                                        style: const TextStyle(                                          fontSize: 16,                                        ),                                      ),                                    ],                                  ),                                ),                              );                            }),                  ],                )),            const SizedBox(              height: 20,            ),            Column(              children: [                Container(                    decoration: const BoxDecoration(                        border: Border(top: BorderSide(color: Colors.black12))),                    child: TextField(                      controller: replyController, // autofocus: true,                      decoration:  InputDecoration(                        // border: InputBorder.none,                        hintText: "Add a response",                        hintStyle: TextStyle(color: black),                        fillColor: Colors.grey.shade50,                        focusedBorder: OutlineInputBorder(                            borderSide: BorderSide(color: Colors.grey)),                        enabledBorder: OutlineInputBorder(                            borderSide: BorderSide(color: Colors.grey)),                        contentPadding: EdgeInsets.symmetric(                            horizontal: 15), // hintStyle: g6S14w4,                      ),                    )),              ],            ),            SizedBox(height: 10,),            Align(              alignment: Alignment.centerLeft,              child: ElevatedButton(                style: ButtonStyle(                    backgroundColor:                    MaterialStateProperty                        .all(logoTheme),                    ),                onPressed: () async {                  if (replyController.text.isEmpty) {                    snackThis(                      context: context,                      content: const Text("Please enter comment"),                      color: Colors.red.shade700,                    );                  } else {                    try {                      setState(() {                        isLoading = true;                      });                      String data = jsonEncode({                        "response": replyController.text,                        "application": widget.request.id                      });                      final res = await CareerRepository().addReply(data);                      if (res.success == true) {                        setState(() {                          isLoading = true;                        });                        Navigator.pop(context);                        snackThis(                            context: context,                            color: Colors.green,                            duration: 2,                            content: Text(res.message.toString()));                        setState(() {                          isLoading = false;                        });                      } else {                        setState(() {                          isLoading = true;                        });                        snackThis(                            context: context,                            color: Colors.green,                            duration: 2,                            content: Text(res.message.toString()));                        setState(() {                          isLoading = false;                        });                      }                      setState(() {                        isLoading = false;                      });                    } on Exception catch (e) {                      setState(() {                        isLoading = true;                      });                      snackThis(                          context: context,                          color: Colors.red,                          duration: 2,                          content: Text(e.toString()));                      setState(() {                        isLoading = false;                      });                    }                  }                },                child: const Text("Respond"),              ),            ),            SizedBox(height: 20,),            _buildInfo("Comments", Icons.comment),            widget.request.response!.isEmpty                ? Container()                : ListView.builder(                    padding: EdgeInsets.zero,                    physics: const BouncingScrollPhysics(),                    shrinkWrap: true,                    itemCount: widget.request.response!.length,                    itemBuilder: (context, innerIndex) {                      return Container(                        padding: const EdgeInsets.symmetric(                            vertical: 20, horizontal: 10),                        decoration: const BoxDecoration(                          color: Colors.white,                          border: Border(                            bottom: BorderSide(                              color: Color(0xffE6EAF0),                              width: 1,                            ),                          ),                        ),                        child: Column(                          mainAxisAlignment: MainAxisAlignment.start,                          crossAxisAlignment: CrossAxisAlignment.start,                          children: [                            Row(                              children: [                                CachedNetworkImage(                                  imageUrl:                                      "$api_url2/uploads/users/${widget.request.response![innerIndex]["responseBy"]["userImage"]}",                                  imageBuilder: (context, imageProvider) =>                                      Container(                                    width: 40.0,                                    height: 40.0,                                    decoration: BoxDecoration(                                      shape: BoxShape.circle,                                      image: DecorationImage(                                          image: imageProvider,                                          fit: BoxFit.cover),                                    ),                                  ),                                  placeholder: (context, url) =>                                      const CircularProgressIndicator(),                                  errorWidget: (context, url, error) =>                                      Container(                                    height: 40,                                    width: 40,                                    decoration: const BoxDecoration(                                      shape: BoxShape                                          .circle, // borderRadius: BorderRadius.circular(3),                                      color: Color(0xff00d0ab),                                    ),                                    child: Center(                                        child: Text(                                      widget                                          .request                                          .response![innerIndex]["responseBy"]                                              ["firstname"]                                          .toString()                                          .toString()                                          .substring(0, 1),                                      style: const TextStyle(                                          fontWeight: FontWeight.w600,                                          fontSize: 16,                                          color: Colors.white),                                    )),                                  ),                                ),                                const SizedBox(                                  width: 15,                                ),                                Column(                                  mainAxisAlignment: MainAxisAlignment.start,                                  crossAxisAlignment: CrossAxisAlignment.start,                                  children: [                                    RichText(                                      text: TextSpan(                                        text:                                            "${widget.request.response![innerIndex]["responseBy"]["firstname"].toString()} ${widget.request.response![innerIndex]["responseBy"]["lastname"].toString()} ",                                        style: const TextStyle(                                            fontWeight: FontWeight.bold,                                            fontSize: 16,                                            color: Colors.black),                                        children: <TextSpan>[                                          widget.request.response![innerIndex]                                                      ["responseBy"]["type"] ==                                                  "Student"                                              ? const TextSpan()                                              : TextSpan(                                                  text:                                                      " (${widget.request.response![innerIndex]["responseBy"]["type"].toString()})",                                                  style: const TextStyle(                                                      fontWeight:                                                          FontWeight.w600,                                                      fontSize: 14,                                                      color: Colors.red,                                                      overflow: TextOverflow                                                          .ellipsis)),                                        ],                                      ),                                    ),                                    const SizedBox(                                      height: 3,                                    ),                                    Text(                                        DateFormat.yMMMEd().add_jm().format(                                            DateTime.parse(widget.request                                                    .response![innerIndex]                                                ["createdAt"])),                                        maxLines: 1,                                        style: const TextStyle(                                            fontSize: 12,                                            overflow: TextOverflow.ellipsis)),                                  ],                                ),                              ],                            ),                            Padding(                              padding: const EdgeInsets.only(left: 45, top: 10),                              child: Text(                                widget.request.response![innerIndex]["message"]                                    .toString(),                                style: const TextStyle(fontSize: 15),                              ),                            ),                          ],                        ),                      );                    }),            const SizedBox(              height: 20,            ),          ],        ),        // bottomNavigationBar: SizedBox(        //     height: _keyboardVisible ? 85 : 75,        //     child: Column(        //       children: [        //         Container(        //             decoration: BoxDecoration(        //                 border: Border(top: BorderSide(color: Colors.black12))),        //             child: TextField(        //               controller: replyController, // autofocus: true,        //               decoration: const InputDecoration(        //                 border: InputBorder.none,        //                 hintText: "Write a comment",        //                 contentPadding: EdgeInsets.symmetric(        //                     horizontal: 15), // hintStyle: g6S14w4,        //               ),        //             )),        //         _keyboardVisible        //             ? Align(        //                 alignment: Alignment.bottomRight,        //                 child: Padding(        //                   padding: const EdgeInsets.symmetric(        //                       horizontal: 10, vertical: 5),        //                   child: InkWell(        //                       onTap: () async {        //                         if (replyController.text.isEmpty) {        //                           snackThis(        //                             context: context,        //                             content: const Text("Please enter comment"),        //                             color: Colors.red.shade700,        //                           );        //                         } else {        //                           try {        //                             setState(() {        //                               isLoading = true;        //                             });        //                             String data = jsonEncode({        //                               "response": replyController.text,        //                               "application": widget.request.id        //                             });        //                             final res =        //                                 await CareerRepository().addReply(data);        //                             if (res.success == true) {        //                               setState(() {        //                                 isLoading = true;        //                               });        //                               Navigator.pop(context);        //                               snackThis(        //                                   context: context,        //                                   color: Colors.green,        //                                   duration: 2,        //                                   content:        //                                       Text(res.message.toString()));        //                               setState(() {        //                                 isLoading = false;        //                               });        //                             } else {        //                               setState(() {        //                                 isLoading = true;        //                               });        //                               snackThis(        //                                   context: context,        //                                   color: Colors.green,        //                                   duration: 2,        //                                   content:        //                                       Text(res.message.toString()));        //                               setState(() {        //                                 isLoading = false;        //                               });        //                             }        //                             setState(() {        //                               isLoading = false;        //                             });        //                           } on Exception catch (e) {        //                             setState(() {        //                               isLoading = true;        //                             });        //                             snackThis(        //                                 context: context,        //                                 color: Colors.red,        //                                 duration: 2,        //                                 content: Text(e.toString()));        //                             setState(() {        //                               isLoading = false;        //                             });        //                           }        //                         }        //                       },        //                       child: const Icon(Icons.send,        //                           color: Colors.blueAccent)),        //                 ))        //             : Container(),        //       ],        //     )),      ),    );  }  Widget _buildInfo(String title, IconData icon) {    return Padding(      padding: const EdgeInsets.only(bottom: 5),      child: Row(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Icon(            icon,            size: 26,          ),          const SizedBox(            width: 10,          ),          Expanded(              child: Text(            title,            style: const TextStyle(                fontSize: 16, color: black, fontWeight: FontWeight.bold),          ))        ],      ),    );  }  _launchURL(String abc) async {    String url = abc;    if (await canLaunch(url)) {      await launch(url);    } else {      throw 'Could not launch $url';    }  }}