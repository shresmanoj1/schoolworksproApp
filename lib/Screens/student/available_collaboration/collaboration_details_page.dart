import 'dart:convert';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:intl/intl.dart';import 'package:multi_select_flutter/dialog/multi_select_dialog_field.dart';import 'package:multi_select_flutter/util/multi_select_item.dart';import 'package:multi_select_flutter/util/multi_select_list_type.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/student/available_collaboration/collaboration_view_model.dart';import 'package:schoolworkspro_app/common_view_model.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../api/repositories/collaboration_repo.dart';import '../../../components/nointernet_widget.dart';import '../../../config/api_response_config.dart';import '../../../constants.dart';import '../../../constants/colors.dart';import '../../../helper/custom_loader.dart';import '../../../response/authenticateduser_response.dart';import '../../widgets/snack_bar.dart';class CreateCollaborationScreen extends StatefulWidget {  final String id;  final String assignmentId;  final String assignmentName;  const CreateCollaborationScreen(      {Key? key,      required this.id,      required this.assignmentId,      required this.assignmentName})      : super(key: key);  @override  State<CreateCollaborationScreen> createState() =>      _CreateCollaborationScreenState();}class _CreateCollaborationScreenState    extends State<CreateCollaborationScreen> {  late CollaborationViewModel _provider;  late CommonViewModel _provider2;  TextEditingController _controller = TextEditingController();  List<String> students = <String>[];  List<String> selectStudent = <String>[];  User? user;  String? batch;  bool isloading = false;  String? selectedBatch;  @override  initState() {    _provider = Provider.of<CollaborationViewModel>(context, listen: false);    _provider2 = Provider.of<CommonViewModel>(context, listen: false);    getData();    super.initState();  }  @override  dispose() {    _controller.dispose();    super.dispose();  }  getData() async {    SharedPreferences sharedPreferences =        await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('_auth_');    Map<String, dynamic> userMap = json.decode(userData!);    User userD = User.fromJson(userMap);    setState(() {      user = userD;    });    print("user batch ${user!.batch}");    _provider.fetchGroupTask(widget.id);    _provider2.fetchStudentformarking(user!.batch.toString()).then((_)async{      var studentObj;      if (_provider2.studentMarking.isNotEmpty) {        var studentIndex = _provider2.studentMarking.indexWhere((element) => element["username"] == user?.username);        if (studentIndex >= 0) {          studentObj = _provider2.studentMarking[studentIndex];          print("USER ID: ${studentObj["_id"]}");          final SharedPreferences localStorage = await SharedPreferences.getInstance();          localStorage.setString("userId", studentObj["_id"].toString());        }      }    });    _provider.fetchAssignmentBatch(widget.id);  }  @override  Widget build(BuildContext context) {    var size = MediaQuery.of(context).size;    final double itemHeight = (size.height - kToolbarHeight - 24) / 5;    final double itemWidth = size.width / 2;    if (isloading == true ) {      customLoadStart();    } else {      customLoadStop();    }    return Consumer2<CollaborationViewModel, CommonViewModel>(        builder: (context, value, common, child) {      return Scaffold(        appBar: AppBar(          backgroundColor: logoTheme,          centerTitle: false,          title: Text(            widget.assignmentName,            style: const TextStyle(color: white, fontSize: 16),          ),        ),        body: isLoading(value.createGroupApiResponse)            ? Builder(              builder: (context) {                print("COLLABORATION::::${value.createGroup.assignmentGroup}");                return const Center(                    child: CupertinoActivityIndicator(),                  );              }            )            : value.createGroup.assignmentGroup == null &&                    value.createGroup.assignmentGroup!.isEmpty                ? const Text("We're having issues loading this page.")                :        Padding(                    padding: const EdgeInsets.symmetric(                        horizontal: 20, vertical: 15),                    child: GridView.builder(                      shrinkWrap: true,                      itemCount:                          value.createGroup.assignmentGroup!.length,                      controller:                          ScrollController(keepScrollOffset: false),                      physics: const BouncingScrollPhysics(),                      gridDelegate:                          SliverGridDelegateWithFixedCrossAxisCount(                        crossAxisCount: 2,                        crossAxisSpacing: 4.0,                        mainAxisSpacing: 4.0,                        childAspectRatio: (itemWidth / itemHeight),                      ),                      itemBuilder: (BuildContext context, int index) {                        return Card(                            elevation: 4,                            child: InkWell(                              onTap: () {                                Navigator.pushNamed(                                    context, "/collaborationTab",                                    arguments: value.createGroup                                        .assignmentGroup![index]);                              },                              child: Padding(                                padding: const EdgeInsets.symmetric(                                    horizontal: 10, vertical: 10),                                child: Column(                                  crossAxisAlignment:                                      CrossAxisAlignment.center,                                  mainAxisAlignment:                                      MainAxisAlignment.center,                                  children: [                                    Flexible(                                        child: Text(                                value                                    .createGroup                                        .assignmentGroup != null || value                                        .createGroup                                        .assignmentGroup!.isNotEmpty ||                                value                                    .createGroup                                        .assignmentGroup![                                    index]                                        .groupName != null ? value                                                .createGroup                                                .assignmentGroup![                                                    index]                                                .groupName                                                .toString() : "",                                            maxLines: 4,                                            style: const TextStyle(                                                color: black,                                                fontSize: 16,                                                overflow: TextOverflow                                                    .ellipsis,                                                fontWeight: FontWeight                                                    .w600))),                                    Row(                                      mainAxisAlignment:                                          MainAxisAlignment.center,                                      children: [                                        Text(                                            value                                                .createGroup                                                .assignmentGroup![                                                    index]                                                .users!                                                .length                                                .toString(),                                            style: const TextStyle(                                                fontSize: 16)),                                        const Text(                                          " members",                                          style: TextStyle(                                              fontSize: 16),                                        ),                                      ],                                    ),                                    const SizedBox(                                      height: 10,                                    ),                                    Row(                                      mainAxisAlignment:                                          MainAxisAlignment.center,                                      children: [                                        const Icon(                                          Icons.lock_clock,                                          color: black,                                          size: 14,                                        ),                                        Text(                                          DateFormat('dd MMM yyyy')                                              .format(                                            DateTime.parse(value                                                .createGroup                                                .assignmentGroup![                                                    index]                                                .createdAt                                                .toString()),                                          ),                                          style: const TextStyle(                                              fontSize: 12),                                        )                                      ],                                    )                                  ],                                ),                              ),                            ));                      },                    ),                  ),        floatingActionButton: FloatingActionButton.extended(            backgroundColor: Colors.green,            onPressed: user == null                ? null                : user!.type == "Teacher"                    ? () {                        showTeacherDialog(context, value, common);                      }                    : () {                        showStudentDialog(context, value, common);                      },            icon: const Icon(Icons.add),            label: const Text("Create Group")),      );    });  }  void showStudentDialog(      BuildContext context, CollaborationViewModel value, CommonViewModel common) {    showDialog(      context: context,      builder: (BuildContext context) {        return StatefulBuilder(builder: (context, setState) {          return AlertDialog(            title: const Text("Create a group"),            content: SizedBox(              height: 320,              child: Column(                mainAxisAlignment: MainAxisAlignment.start,                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  const Text("Title"),                  const SizedBox(                    height: 5,                  ),                  SizedBox(                    height: 50,                    child: TextField(                        cursorColor: kPrimaryColor,                        controller: _controller,                        decoration: const InputDecoration(                          hintText: "# Group Name",                          border: OutlineInputBorder(                            borderRadius: BorderRadius.all(                                Radius.circular(4.0)),                            borderSide:                                BorderSide(color: Colors.grey),                          ),                        )),                  ),                  const SizedBox(                    height: 10,                  ),                  const Text("Assigned to"),                  const SizedBox(                    height: 5,                  ),                  Expanded(                      child: MultiSelectDialogField(                    items: common.studentMarking                        .map((e) => MultiSelectItem(                            e["_id"].toString(), e["firstname"].toString()))                        .toList(),                    listType: MultiSelectListType.CHIP,                    autovalidateMode: AutovalidateMode.always,                    onConfirm: (List<String> values) {                      setState(() {                        selectStudent = values;                      });                    },                  )),                  const SizedBox(                    height: 5,                  ),                  Row(                    mainAxisAlignment: MainAxisAlignment.center,                    crossAxisAlignment: CrossAxisAlignment.center,                    children: <Widget>[                      Padding(                        padding: const EdgeInsets.only(                            left: 15.0, top: 15.0),                        child: SizedBox(                          height: 40,                          width: 95,                          child: ElevatedButton(                            style: ButtonStyle(                                backgroundColor:                                    MaterialStateProperty.all(                                        Colors.white),                                shape: MaterialStateProperty.all<                                        RoundedRectangleBorder>(                                    RoundedRectangleBorder(                                  borderRadius:                                      BorderRadius.circular(18.0),                                ))),                            onPressed: () {                              Navigator.pop(context);                            },                            child: const Text("Cancel",                                style: TextStyle(                                    fontSize: 14,                                    color: Colors.black)),                          ),                        ),                      ),                      Padding(                        padding: const EdgeInsets.only(                            left: 15.0, top: 15.0),                        child: SizedBox(                          height: 40,                          width: 95,                          child: ElevatedButton(                            onPressed: () async {                              try {                                setState(() {                                  isloading = true;                                });                                String data = jsonEncode({                                  "assignment": widget.assignmentId,                                  "detail": "",                                  "groupName": _controller.text,                                  "username": user?.username,                                  "users": selectStudent                                });                                print("DATA::::$data");                                final res =                                    await CollaborationRepository()                                        .createGroup(data);                                _controller.clear();                                if (res.success == true) {                                  setState(() {                                    isloading = true;                                  });                                  Navigator.pop(context);                                  getData();                                  snackThis(                                      context: context,                                      color: Colors.green,                                      duration: 2,                                      content: Text(                                          res.message.toString()));                                  setState(() {                                    isloading = false;                                  });                                } else {                                  setState(() {                                    isloading = true;                                  });                                  snackThis(                                      context: context,                                      color: Colors.red,                                      duration: 2,                                      content: Text(                                          res.message.toString()));                                  setState(() {                                    isloading = false;                                  });                                }                              } on Exception catch (e) {                                setState(() {                                  isloading = true;                                });                                snackThis(                                    context: context,                                    color: Colors.red,                                    duration: 2,                                    content: Text(e.toString()));                                setState(() {                                  isloading = false;                                });                              }                            },                            style: ButtonStyle(                                backgroundColor:                                    MaterialStateProperty.all(                                        Colors.green),                                shape: MaterialStateProperty.all<                                        RoundedRectangleBorder>(                                    RoundedRectangleBorder(                                  borderRadius:                                      BorderRadius.circular(18.0),                                ))),                            child: const Text(                              "Save",                              style: TextStyle(                                  fontSize: 14, color: white),                            ),                          ),                        ),                      )                    ],                  ),                ],              ),            ),          );        });      },    );  }  void showTeacherDialog(      BuildContext context, CollaborationViewModel value, CommonViewModel common) {    showDialog(      context: context,      builder: (BuildContext context) {        return StatefulBuilder(            builder: (BuildContext context, StateSetter setStates) {          WidgetsBinding.instance.addPostFrameCallback((timeStamp) {            setStates(() {              _provider2.studentMarking;            });          });          return AlertDialog(              title: Text("Create a Group"),              scrollable: true,              content: isLoading(value.assignmentBatchApiResponse)                  ? const Center(child: CupertinoActivityIndicator())                  : SizedBox(                      height: 360,                      child: isLoading(                              value.assignmentBatchApiResponse)                          ? const Center(                              child: CupertinoActivityIndicator())                          : value.assignmentBatch.batcharr == null                              ? Container()                              : SingleChildScrollView(                                  child: Column(                                  mainAxisAlignment:                                      MainAxisAlignment.start,                                  crossAxisAlignment:                                      CrossAxisAlignment.start,                                  children: [                                    const Text("Title"),                                    const SizedBox(                                      height: 5,                                    ),                                    SizedBox(                                      height: 50,                                      child: TextField(                                          cursorColor: kPrimaryColor,                                          controller: _controller,                                          decoration:                                              const InputDecoration(                                            hintText: "# Group Name",                                            border:                                                OutlineInputBorder(                                              borderRadius:                                                  BorderRadius.all(                                                      Radius.circular(                                                          4.0)),                                              borderSide: BorderSide(                                                  color: Colors.grey),                                            ),                                          )),                                    ),                                    SizedBox(                                      height: 10,                                    ),                                    const Text("Select batch"),                                    const SizedBox(                                      height: 5,                                    ),                                    DropdownButtonFormField(                                      items: value                                          .assignmentBatch.batcharr!                                          .map((pt) {                                        return DropdownMenuItem(                                          value: pt,                                          child: Text(pt),                                        );                                      }).toList(),                                      onChanged: (newVal) {                                        setState(() {                                          selectedBatch =                                              newVal.toString();                                          common.fetchStudentformarking(                                              selectedBatch                                                  .toString());                                        });                                      },                                      icon: const Icon(Icons                                          .arrow_drop_down_outlined),                                      decoration:                                          const InputDecoration(                                        enabledBorder:                                            OutlineInputBorder(                                                borderSide: BorderSide(                                                    color:                                                        kPrimaryColor)),                                        filled: true,                                        hintText:                                            'Select Batch/Section',                                      ),                                    ),                                    const SizedBox(                                      height: 10,                                    ),                                    selectedBatch == null                                        ? SizedBox()                                        : isLoading(common.studentMarkingApiResponse)                                            ? Container()                                            : Column(                                                crossAxisAlignment:                                                    CrossAxisAlignment                                                        .start,                                                children: [                                                  const Text(                                                      "Assigned to"),                                                  const SizedBox(                                                    height: 5,                                                  ),                                                  MultiSelectDialogField(                                                    items: common.studentMarking                                                        .map((e) => MultiSelectItem(                                                            e.id                                                                .toString(),                                                            e.username                                                                .toString()))                                                        .toList(),                                                    listType:                                                        MultiSelectListType                                                            .CHIP,                                                    autovalidateMode:                                                        AutovalidateMode                                                            .always,                                                    onConfirm:                                                        (List<String>                                                            values) {                                                      setState(() {                                                        selectStudent =                                                            values;                                                      });                                                    },                                                  ),                                                ],                                              ),                                    const SizedBox(                                      height: 5,                                    ),                                    Row(                                      mainAxisAlignment:                                          MainAxisAlignment.center,                                      crossAxisAlignment:                                          CrossAxisAlignment.center,                                      children: <Widget>[                                        Padding(                                          padding:                                              const EdgeInsets.only(                                                  left: 15.0,                                                  top: 15.0),                                          child: SizedBox(                                            height: 40,                                            width: 95,                                            child: ElevatedButton(                                              style: ButtonStyle(                                                  backgroundColor:                                                      MaterialStateProperty                                                          .all(Colors                                                              .white),                                                  shape: MaterialStateProperty.all<                                                          RoundedRectangleBorder>(                                                      RoundedRectangleBorder(                                                    borderRadius:                                                        BorderRadius                                                            .circular(                                                                18.0),                                                  ))),                                              onPressed: () {                                                Navigator.pop(                                                    context);                                              },                                              child: const Text(                                                  "Cancel",                                                  style: TextStyle(                                                      fontSize: 14,                                                      color: Colors                                                          .black)),                                            ),                                          ),                                        ),                                        Padding(                                          padding:                                              const EdgeInsets.only(                                                  left: 15.0,                                                  top: 15.0),                                          child: SizedBox(                                            height: 40,                                            width: 95,                                            child: ElevatedButton(                                              onPressed: () async {                                                try {                                                  setState(() {                                                    isloading = true;                                                  });                                                  if (_controller                                                      .text.isEmpty) {                                                    setState(() {                                                      isloading = false;                                                    });                                                    Fluttertoast                                                        .showToast(                                                            msg:                                                                "Enter Group Name");                                                  } else if (selectedBatch ==                                                      null) {                                                    setState(() {                                                      isloading = false;                                                    });                                                    Fluttertoast                                                        .showToast(                                                            msg:                                                                "Select Batch");                                                  } else {                                                    String data =                                                        jsonEncode({                                                      "assignment": widget                                                          .assignmentId,                                                      "detail": "",                                                      "groupName":                                                          _controller                                                              .text,                                                      "username": user                                                          ?.username,                                                      "users":                                                          selectStudent                                                    });                                                    final res =                                                        await CollaborationRepository()                                                            .createGroup(                                                                data);                                                    _controller                                                        .clear();                                                    if (res.success ==                                                        true) {                                                      setState(() {                                                        isloading =                                                            true;                                                      });                                                      Navigator.pop(                                                          context);                                                      getData();                                                      snackThis(                                                          context:                                                              context,                                                          color: Colors                                                              .green,                                                          duration: 2,                                                          content: Text(res                                                              .message                                                              .toString()));                                                      setState(() {                                                        isloading =                                                            false;                                                      });                                                    } else {                                                      setState(() {                                                        isloading =                                                            true;                                                      });                                                      snackThis(                                                          context:                                                              context,                                                          color: Colors                                                              .red,                                                          duration: 2,                                                          content: Text(res                                                              .message                                                              .toString()));                                                      setState(() {                                                        isloading =                                                            false;                                                      });                                                    }                                                  }                                                } on Exception catch (e) {                                                  setState(() {                                                    isloading = true;                                                  });                                                  snackThis(                                                      context:                                                          context,                                                      color:                                                          Colors.red,                                                      duration: 2,                                                      content: Text(e                                                          .toString()));                                                  setState(() {                                                    isloading = false;                                                  });                                                }                                              },                                              style: ButtonStyle(                                                  backgroundColor:                                                      MaterialStateProperty                                                          .all(Colors                                                              .green),                                                  shape: MaterialStateProperty.all<                                                          RoundedRectangleBorder>(                                                      RoundedRectangleBorder(                                                    borderRadius:                                                        BorderRadius                                                            .circular(                                                                18.0),                                                  ))),                                              child: const Text(                                                "Save",                                                style: TextStyle(                                                    fontSize: 14,                                                    color: white),                                              ),                                            ),                                          ),                                        )                                      ],                                    ),                                  ],                                )),                    ));        });      },    );  }}