import 'dart:convert';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:multi_select_flutter/dialog/multi_select_dialog_field.dart';import 'package:multi_select_flutter/util/multi_select_item.dart';import 'package:multi_select_flutter/util/multi_select_list_type.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/student/available_collaboration/collaboration_details_page.dart';import 'package:schoolworkspro_app/Screens/student/available_collaboration/collaboration_tab_page.dart';import 'package:schoolworkspro_app/Screens/student/available_collaboration/collaboration_view_model.dart';import 'package:schoolworkspro_app/common_view_model.dart';import 'package:schoolworkspro_app/extension/sizebox_ex.dart';import 'package:schoolworkspro_app/helper/custom_loader.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../api/repositories/collaboration_repo.dart';import '../../../config/api_response_config.dart';import '../../../constants.dart';import '../../../constants/colors.dart';import '../../../response/authenticateduser_response.dart';import 'package:intl/intl.dart';import '../../widgets/snack_bar.dart';class AvailableCollaborationScreen extends StatefulWidget {  final String moduleId;  const AvailableCollaborationScreen({Key? key, required this.moduleId})      : super(key: key);  @override  State<AvailableCollaborationScreen> createState() =>      _AvailableCollaborationScreenState();}class _AvailableCollaborationScreenState    extends State<AvailableCollaborationScreen> {  late CollaborationViewModel _provider;  User? user;  String? userId;  TextEditingController groupNameController = TextEditingController();  List<String> selectStudent = <String>[];  @override  initState() {    super.initState();    selectStudent.clear();    getUserData();    refreshPage();  }  Future<void> refreshPage() async {    WidgetsBinding.instance.addPostFrameCallback((_) {      _provider = Provider.of<CollaborationViewModel>(context, listen: false);      _provider.fetchAvailableCollaboration(widget.moduleId);    });  }  getUserData() async {    SharedPreferences sharedPreferences = await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('_auth_');    String? userId = sharedPreferences.getString('userId');    Map<String, dynamic> userMap = json.decode(userData!);    User userD = User.fromJson(userMap);    setState(() {      user = userD;      this.userId = userId;      selectStudent.clear();      selectStudent.add(this.userId ?? "");    });  }  @override  Widget build(BuildContext context) {    var size = MediaQuery.of(context).size;    final double itemHeight = (size.height - kToolbarHeight - 24) / 5;    final double itemWidth = size.width / 2;    return Consumer2<CollaborationViewModel, CommonViewModel>(        builder: (context, value, common, child) {      return Scaffold(        body: RefreshIndicator(            onRefresh: () => refreshPage(),            child: ListView(              children: [                isLoading(value.availableCollaborationApiResponse)                    ? const Center(                        child: CupertinoActivityIndicator(),                      )                    : value.availableCollaboration.modules == null ||                            value.availableCollaboration.modules!.isEmpty                        ? Image.asset("assets/images/no_content.PNG")                        : Padding(                            padding: const EdgeInsets.symmetric(                                horizontal: 20, vertical: 15),                            child: GridView.builder(                              shrinkWrap: true,                              itemCount:                                  value.availableCollaboration.modules!.length,                              physics: const BouncingScrollPhysics(),                              gridDelegate:                                  SliverGridDelegateWithFixedCrossAxisCount(                                crossAxisCount: 2,                                crossAxisSpacing: 4.0,                                mainAxisSpacing: 4.0,                                childAspectRatio: (itemWidth / itemHeight),                              ),                              itemBuilder: (BuildContext context, int index) {                                return Card(                                    elevation: 4,                                    child: InkWell(                                      onTap: value.availableCollaboration                                                  .modules?[index].isApproved ==                                              false                                          ? null                                          : () {                                              Navigator.push(                                                  context,                                                  MaterialPageRoute(                                                      builder: (context) =>                                                          CollaborationTabScreen(                                                              moduleId: value                                                                      .availableCollaboration                                                                      .modules?[                                                                          index]                                                                      .id ??                                                                  "")));                                            },                                      child: Padding(                                        padding: const EdgeInsets.symmetric(                                            horizontal: 5, vertical: 5),                                        child: Column(                                          crossAxisAlignment:                                              CrossAxisAlignment.center,                                          mainAxisAlignment:                                              MainAxisAlignment.center,                                          children: [                                            Flexible(                                                child: Text(                                                    value                                                            .availableCollaboration                                                            .modules?[index]                                                            .groupName                                                            .toString() ??                                                        "",                                                    maxLines: 4,                                                    style: const TextStyle(                                                        color: black,                                                        fontSize: 17,                                                        overflow: TextOverflow                                                            .ellipsis,                                                        fontWeight:                                                            FontWeight.w700))),                                            Row(                                              children: [                                                const Icon(Icons.person),                                                Text(                                                  "  ${value.availableCollaboration.modules![index].users?.length} member(s)",                                                  style: const TextStyle(                                                      fontWeight:                                                          FontWeight.w500,                                                      fontSize: 16),                                                )                                              ],                                            ),                                            value                                                        .availableCollaboration                                                        .modules![index]                                                        .isApproved ==                                                    true                                                ? Container(                                                    padding: const EdgeInsets                                                            .symmetric(                                                        horizontal: 10,                                                        vertical: 1),                                                    decoration: BoxDecoration(                                                        color: Colors.green,                                                        borderRadius:                                                            BorderRadius                                                                .circular(6)),                                                    child: const Text(                                                      "Approved",                                                      style: TextStyle(                                                          color: Colors.white),                                                    ),                                                  )                                                : Container(                                                    padding: const EdgeInsets                                                            .symmetric(                                                        horizontal: 10,                                                        vertical: 1),                                                    decoration: BoxDecoration(                                                        color: Colors.orange,                                                        borderRadius:                                                            BorderRadius                                                                .circular(6)),                                                    child: const Text(                                                      "Pending",                                                      style: TextStyle(                                                          color: Colors.white),                                                    ),                                                  )                                          ],                                        ),                                      ),                                    ));                              },                            ),                          ),              ],            )),        floatingActionButton: FloatingActionButton.extended(            backgroundColor: Colors.green,            onPressed: () {              showStudentDialog(context, value, common);            },            icon: const Icon(Icons.add),            label: const Text("Create Group")),      );    });  }  void showStudentDialog(BuildContext context, CollaborationViewModel value,      CommonViewModel common) {    showDialog(      context: context,      builder: (BuildContext context) {        return StatefulBuilder(builder: (context, setState) {          return AlertDialog(            // scrollable: true,            title: const Text("Create a group"),            content: SizedBox(              height: 320,              child: Column(                mainAxisAlignment: MainAxisAlignment.start,                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  const Text("Title"),                  5.sH,                  SizedBox(                    height: 50,                    child: TextField(                        cursorColor: kPrimaryColor,                        controller: groupNameController,                        decoration: const InputDecoration(                          hintText: "# Group Name",                          border: OutlineInputBorder(                            borderRadius:                                BorderRadius.all(Radius.circular(4.0)),                            borderSide: BorderSide(color: Colors.grey),                          ),                        )),                  ),                  10.sH,                  const Text("Assigned to"),                  5.sH,                  Expanded(                      child: MultiSelectDialogField(                    items: common.currentStudent                        .map((e) => MultiSelectItem(                            e.id.toString(), e.firstname.toString()))                        .toList(),                    initialValue: [userId ?? ""],                    listType: MultiSelectListType.CHIP,                    autovalidateMode: AutovalidateMode.always,                    onConfirm: (List<String> values) {                      setState(() {                        selectStudent = values;                      });                    },                  )),                  const SizedBox(                    height: 5,                  ),                  Row(                    mainAxisAlignment: MainAxisAlignment.center,                    crossAxisAlignment: CrossAxisAlignment.center,                    children: <Widget>[                      _buildButton(                          title: "Cancel",                          background: Colors.white,                          onPressed: () {                            Navigator.pop(context);                          },                          value: value,                          color: Colors.black),                      _buildButton(                          title: "Save",                          background: Colors.green,                          onPressed: () async {                            try {                              if (groupNameController.text.isEmpty) {                                return errorSnackThis(                                    context: context,                                    content: const Text(                                        "Group Title can't be empty"));                              }                              customLoadStart();                              String data = jsonEncode({                                "module": widget.moduleId,                                "detail": "",                                "groupName": groupNameController.text,                                "username": user?.username,                                "users": selectStudent                              });                              final res = await CollaborationRepository()                                  .createGroup(data);                              groupNameController.clear();                              if (res.success == true) {                                value.fetchAvailableCollaboration(                                    widget.moduleId);                                Navigator.pop(context);                                snackThis(                                    context: context,                                    color: Colors.green,                                    duration: 2,                                    content: Text(res.message.toString()));                              } else {                                snackThis(                                    context: context,                                    color: Colors.red,                                    duration: 2,                                    content: Text(res.message.toString()));                              }                            } on Exception catch (e) {                              snackThis(                                  context: context,                                  color: Colors.red,                                  duration: 2,                                  content: Text(e.toString()));                            } finally {                              customLoadStop();                            }                          },                          value: value,                          color: Colors.white),                    ],                  ),                ],              ),            ),          );        });      },    );  }  Widget _buildButton(      {required String title,      required void Function()? onPressed,      required Color background,      required Color color,      required CollaborationViewModel value}) {    return Padding(      padding: const EdgeInsets.only(left: 15.0, top: 15.0),      child: SizedBox(        height: 40,        width: 95,        child: ElevatedButton(          onPressed: onPressed,          style: ButtonStyle(              backgroundColor: MaterialStateProperty.all(background),              shape: MaterialStateProperty.all<RoundedRectangleBorder>(                  RoundedRectangleBorder(                borderRadius: BorderRadius.circular(18.0),              ))),          child: Text(            title,            style: TextStyle(fontSize: 14, color: color),          ),        ),      ),    );  }}